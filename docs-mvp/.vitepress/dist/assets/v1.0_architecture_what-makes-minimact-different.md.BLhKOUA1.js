import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"What Makes Minimact Different","description":"","frontmatter":{},"headers":[],"relativePath":"v1.0/architecture/what-makes-minimact-different.md","filePath":"v1.0/architecture/what-makes-minimact-different.md"}'),e={name:"v1.0/architecture/what-makes-minimact-different.md"};function l(p,s,h,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="what-makes-minimact-different" tabindex="-1">What Makes Minimact Different <a class="header-anchor" href="#what-makes-minimact-different" aria-label="Permalink to &quot;What Makes Minimact Different&quot;">​</a></h1><p>Minimact isn&#39;t just another React framework. It represents a fundamental paradigm shift in how we think about server-side rendering, state management, and client-server communication.</p><h2 id="the-hydration-problem" tabindex="-1">The Hydration Problem <a class="header-anchor" href="#the-hydration-problem" aria-label="Permalink to &quot;The Hydration Problem&quot;">​</a></h2><p>Traditional server-side rendering frameworks face a dilemma:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────┐</span></span>
<span class="line"><span>│  Traditional SSR Flow                   │</span></span>
<span class="line"><span>├─────────────────────────────────────────┤</span></span>
<span class="line"><span>│  1. Server renders HTML                 │</span></span>
<span class="line"><span>│  2. Client downloads 50-150KB JS bundle │</span></span>
<span class="line"><span>│  3. Client &quot;hydrates&quot; - replays render  │</span></span>
<span class="line"><span>│  4. Client reconciles every interaction │</span></span>
<span class="line"><span>│  5. VDOM diff on every state change     │</span></span>
<span class="line"><span>└─────────────────────────────────────────┘</span></span></code></pre></div><p><strong>Problems:</strong></p><ul><li>❌ Large JavaScript bundles</li><li>❌ Hydration waterfall delays interactivity</li><li>❌ CPU overhead from client-side reconciliation</li><li>❌ Wasted work - server already rendered the HTML!</li></ul><h2 id="the-minimact-solution" tabindex="-1">The Minimact Solution <a class="header-anchor" href="#the-minimact-solution" aria-label="Permalink to &quot;The Minimact Solution&quot;">​</a></h2><p>Minimact flips the model entirely:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────┐</span></span>
<span class="line"><span>│  Minimact Flow                          │</span></span>
<span class="line"><span>├─────────────────────────────────────────┤</span></span>
<span class="line"><span>│  1. Server renders HTML                 │</span></span>
<span class="line"><span>│  2. Client downloads ~5KB runtime       │</span></span>
<span class="line"><span>│  3. Server pre-computes state changes   │</span></span>
<span class="line"><span>│  4. Client caches predicted patches     │</span></span>
<span class="line"><span>│  5. User interacts → instant update     │</span></span>
<span class="line"><span>│     (patch already in cache!)           │</span></span>
<span class="line"><span>│  6. Server verifies in background       │</span></span>
<span class="line"><span>└─────────────────────────────────────────┘</span></span></code></pre></div><p><strong>Benefits:</strong></p><ul><li>✅ 5KB client vs 50-150KB (10-30x smaller)</li><li>✅ No hydration required</li><li>✅ Zero client-side reconciliation</li><li>✅ 2-3ms perceived latency (vs 47ms traditional)</li><li>✅ Instant interactions (cached patches)</li></ul><h2 id="client-side-stored-procedures" tabindex="-1">Client-Side Stored Procedures <a class="header-anchor" href="#client-side-stored-procedures" aria-label="Permalink to &quot;Client-Side Stored Procedures&quot;">​</a></h2><p>The core insight: <strong>treat UI state transitions like database stored procedures</strong>.</p><h3 id="traditional-approach" tabindex="-1">Traditional Approach <a class="header-anchor" href="#traditional-approach" aria-label="Permalink to &quot;Traditional Approach&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client downloads logic</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client executes on every interaction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeNextState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentState);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reconcile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vdom, newState); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expensive!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  applyPatches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Problem:</strong> Client does expensive work <strong>every single time</strong>.</p><h3 id="minimact-approach" tabindex="-1">Minimact Approach <a class="header-anchor" href="#minimact-approach" aria-label="Permalink to &quot;Minimact Approach&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server pre-compiles state transitions</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client executes pre-computed patches</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> patch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hintId); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Already cached!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  applyPatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dom, patch);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instant!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Insight:</strong> Just like stored procedures move computation to the database, Minimact moves UI computation to the server and caches the results.</p><h2 id="universal-template-prediction" tabindex="-1">Universal Template Prediction <a class="header-anchor" href="#universal-template-prediction" aria-label="Permalink to &quot;Universal Template Prediction&quot;">​</a></h2><p>The breakthrough: <strong>one template handles infinite values</strong>.</p><h3 id="before-templates" tabindex="-1">Before Templates <a class="header-anchor" href="#before-templates" aria-label="Permalink to &quot;Before Templates&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>State 0 → Prediction: &quot;Count: 0&quot;  (150 bytes)</span></span>
<span class="line"><span>State 1 → Prediction: &quot;Count: 1&quot;  (150 bytes)</span></span>
<span class="line"><span>State 2 → Prediction: &quot;Count: 2&quot;  (150 bytes)</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>State 1000 → 150KB of predictions!</span></span></code></pre></div><h3 id="after-templates-phase-1-9" tabindex="-1">After Templates (Phase 1-9) <a class="header-anchor" href="#after-templates-phase-1-9" aria-label="Permalink to &quot;After Templates (Phase 1-9)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Any state → Template: &quot;Count: {0}&quot;  (200 bytes)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>State 0 → Apply template → &quot;Count: 0&quot;  ✅</span></span>
<span class="line"><span>State 1 → Apply template → &quot;Count: 1&quot;  ✅</span></span>
<span class="line"><span>State 1000000 → Apply template → &quot;Count: 1000000&quot;  ✅</span></span></code></pre></div><p><strong>Result:</strong> 750x memory reduction, 100% coverage after first interaction.</p><h2 id="react-syntax-net-performance" tabindex="-1">React Syntax, .NET Performance <a class="header-anchor" href="#react-syntax-net-performance" aria-label="Permalink to &quot;React Syntax, .NET Performance&quot;">​</a></h2><p>Write familiar React code:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Count: {count}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Babel transpiles to C#:</strong></p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MinimactComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VNode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Increment) },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Count: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        TriggerRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Rust engine predicts:</strong></p><ul><li>Extracts template: <code>&quot;Count: {0}&quot;</code></li><li>Pre-computes patch for <code>count + 1</code></li><li>Caches patch on client</li><li>Client applies instantly on click</li></ul><h2 id="hybrid-state-management" tabindex="-1">Hybrid State Management <a class="header-anchor" href="#hybrid-state-management" aria-label="Permalink to &quot;Hybrid State Management&quot;">​</a></h2><p>The best of both worlds:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SearchBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Client-only - instant, no network</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useClientState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Server-managed - secure, persistent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">results</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Instant typing feedback */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{query}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.value)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Server computation */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query))}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Server-rendered results */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {results.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r} /&gt;)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Key insight:</strong> Not everything needs a server round-trip. Use the right tool for the job.</p><h2 id="zero-hydration" tabindex="-1">Zero Hydration <a class="header-anchor" href="#zero-hydration" aria-label="Permalink to &quot;Zero Hydration&quot;">​</a></h2><p>Traditional frameworks ship the framework to the client:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Client Bundle:</span></span>
<span class="line"><span>├── React reconciliation engine</span></span>
<span class="line"><span>├── VDOM implementation</span></span>
<span class="line"><span>├── Component tree</span></span>
<span class="line"><span>├── State management</span></span>
<span class="line"><span>└── Event system</span></span>
<span class="line"><span>Total: 50-150KB</span></span></code></pre></div><p>Minimact ships only what&#39;s needed:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Client Bundle:</span></span>
<span class="line"><span>├── SignalR client</span></span>
<span class="line"><span>├── DOM patcher</span></span>
<span class="line"><span>├── Event delegation</span></span>
<span class="line"><span>└── Patch cache</span></span>
<span class="line"><span>Total: ~5KB</span></span></code></pre></div><p><strong>Why?</strong> The server already has all the logic. Client just needs to:</p><ol><li>Send events to server</li><li>Apply patches from server</li><li>Cache predicted patches</li></ol><h2 id="typescript-→-c-type-safety" tabindex="-1">TypeScript → C# Type Safety <a class="header-anchor" href="#typescript-→-c-type-safety" aria-label="Permalink to &quot;TypeScript → C# Type Safety&quot;">​</a></h2><p>End-to-end type safety:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeScript component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{user.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Babel infers C# types:</strong></p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MinimactComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserProfileProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserProfileProps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Result:</strong> Refactor-safe, autocomplete everywhere, catch errors at compile time.</p><h2 id="progressive-enhancement" tabindex="-1">Progressive Enhancement <a class="header-anchor" href="#progressive-enhancement" aria-label="Permalink to &quot;Progressive Enhancement&quot;">​</a></h2><p>Works without JavaScript:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Server renders full HTML --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/search&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Search&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- JavaScript enhances with SignalR --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Intercepts form, uses SignalR instead</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Falls back to POST if JS disabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Philosophy:</strong> Start with solid HTML, enhance progressively.</p><h2 id="comparison-to-alternatives" tabindex="-1">Comparison to Alternatives <a class="header-anchor" href="#comparison-to-alternatives" aria-label="Permalink to &quot;Comparison to Alternatives&quot;">​</a></h2><h3 id="vs-next-js-remix-client-side-react" tabindex="-1">vs Next.js/Remix (Client-Side React) <a class="header-anchor" href="#vs-next-js-remix-client-side-react" aria-label="Permalink to &quot;vs Next.js/Remix (Client-Side React)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Aspect</th><th>Minimact</th><th>Next.js/Remix</th></tr></thead><tbody><tr><td><strong>Client bundle</strong></td><td>~5KB</td><td>~50-150KB</td></tr><tr><td><strong>Hydration</strong></td><td>None</td><td>Required</td></tr><tr><td><strong>Interaction latency</strong></td><td>2-3ms</td><td>47ms+</td></tr><tr><td><strong>Server language</strong></td><td>.NET</td><td>Node.js</td></tr><tr><td><strong>Type safety</strong></td><td>TS→C#</td><td>TS only</td></tr></tbody></table><p><strong>When to use Minimact:</strong> Enterprise .NET apps, strict security requirements, minimal client footprint</p><p><strong>When to use Next/Remix:</strong> Heavy client interactivity, existing Node.js infrastructure</p><h3 id="vs-blazor-server-net-ssr" tabindex="-1">vs Blazor Server (.NET SSR) <a class="header-anchor" href="#vs-blazor-server-net-ssr" aria-label="Permalink to &quot;vs Blazor Server (.NET SSR)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Aspect</th><th>Minimact</th><th>Blazor</th></tr></thead><tbody><tr><td><strong>Syntax</strong></td><td>React JSX/TSX</td><td>Razor C#</td></tr><tr><td><strong>Learning curve</strong></td><td>Low (React)</td><td>Medium (Blazor)</td></tr><tr><td><strong>Prediction</strong></td><td>✅ Rust-powered</td><td>❌ None</td></tr><tr><td><strong>Template system</strong></td><td>✅ 98% memory reduction</td><td>❌ None</td></tr><tr><td><strong>Hybrid state</strong></td><td>✅ Built-in</td><td>❌ Manual</td></tr></tbody></table><p><strong>When to use Minimact:</strong> React developers, predictive rendering needs, hybrid state</p><p><strong>When to use Blazor:</strong> Pure .NET teams, existing Blazor experience</p><h3 id="vs-htmx-hypermedia" tabindex="-1">vs HTMX (Hypermedia) <a class="header-anchor" href="#vs-htmx-hypermedia" aria-label="Permalink to &quot;vs HTMX (Hypermedia)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Aspect</th><th>Minimact</th><th>HTMX</th></tr></thead><tbody><tr><td><strong>Paradigm</strong></td><td>Component-based</td><td>Hypermedia</td></tr><tr><td><strong>Bundle size</strong></td><td>~5KB</td><td>~14KB</td></tr><tr><td><strong>Type safety</strong></td><td>✅ TS→C#</td><td>❌ None</td></tr><tr><td><strong>Prediction</strong></td><td>✅ Intelligent</td><td>❌ None</td></tr><tr><td><strong>Complexity</strong></td><td>React components</td><td>HTML attributes</td></tr></tbody></table><p><strong>When to use Minimact:</strong> Complex UIs, type safety, predictive rendering</p><p><strong>When to use HTMX:</strong> Simple apps, hypermedia architecture, extreme simplicity</p><h2 id="the-posthydrationist-philosophy" tabindex="-1">The Posthydrationist Philosophy <a class="header-anchor" href="#the-posthydrationist-philosophy" aria-label="Permalink to &quot;The Posthydrationist Philosophy&quot;">​</a></h2><blockquote><p><em>The cactus doesn&#39;t hydrate—it stores.</em><em>It doesn&#39;t react—it anticipates.</em><em>It doesn&#39;t reconcile—it persists.</em></p></blockquote><p>Traditional frameworks are built on <strong>hydration</strong> - sending code to the client and reconstructing state.</p><p>Minimact is built on <strong>prediction</strong> - knowing what will happen before it does, and having the answer ready.</p><p>Like a cactus in the desert:</p><ul><li><strong>Minimal</strong> - Only what&#39;s needed (~5KB)</li><li><strong>Resilient</strong> - Works without JavaScript</li><li><strong>Anticipatory</strong> - Pre-computed state changes</li><li><strong>Efficient</strong> - No wasted reconciliation</li></ul><h2 id="summary-the-paradigm-shift" tabindex="-1">Summary: The Paradigm Shift <a class="header-anchor" href="#summary-the-paradigm-shift" aria-label="Permalink to &quot;Summary: The Paradigm Shift&quot;">​</a></h2><p><strong>Traditional SSR:</strong></p><ul><li>Ship framework to client</li><li>Hydrate on client</li><li>Reconcile on every interaction</li><li>Compute state changes in real-time</li></ul><p><strong>Minimact:</strong></p><ul><li>Keep framework on server</li><li>No hydration needed</li><li>Pre-compute state changes</li><li>Cache predictions on client</li><li>Apply cached patches instantly</li></ul><p><strong>Result:</strong> Faster, smaller, more secure.</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/v1.0/architecture/predictive-rendering-101.html">Predictive Rendering 101</a> - Deep dive into prediction</li><li><a href="/v1.0/architecture/dom-as-data-source.html">DOM as Data Source</a> - Extensions ecosystem</li><li><a href="/v1.0/architecture/posthydrationist-manifesto.html">Posthydrationist Manifesto</a> - The philosophy</li><li><a href="/v1.0/guide/getting-started.html">Getting Started</a> - Build your first app</li></ul>`,82)])])}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
