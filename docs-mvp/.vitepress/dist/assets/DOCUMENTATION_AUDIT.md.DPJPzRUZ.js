import{_ as t,c as s,o as i,ag as o}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Documentation Audit: Real vs Hallucinated Features","description":"","frontmatter":{},"headers":[],"relativePath":"DOCUMENTATION_AUDIT.md","filePath":"DOCUMENTATION_AUDIT.md"}'),a={name:"DOCUMENTATION_AUDIT.md"};function l(n,e,r,u,d,c){return i(),s("div",null,[...e[0]||(e[0]=[o(`<h1 id="documentation-audit-real-vs-hallucinated-features" tabindex="-1">Documentation Audit: Real vs Hallucinated Features <a class="header-anchor" href="#documentation-audit-real-vs-hallucinated-features" aria-label="Permalink to &quot;Documentation Audit: Real vs Hallucinated Features&quot;">​</a></h1><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>This audit identifies features documented in <code>docs-mvp/</code> that don&#39;t actually exist in the codebase, likely from AI hallucinations in previous sessions.</p><hr><h2 id="✅-core-hooks-actually-implemented" tabindex="-1">✅ Core Hooks (Actually Implemented) <a class="header-anchor" href="#✅-core-hooks-actually-implemented" aria-label="Permalink to &quot;✅ Core Hooks (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/client-runtime/src/hooks.ts</code>:</p><ol><li><strong>useState</strong> ✅ Real (hooks.ts:68)</li><li><strong>useEffect</strong> ✅ Real (hooks.ts:185)</li><li><strong>useRef</strong> ✅ Real (hooks.ts:240)</li><li><strong>useServerTask</strong> ✅ Real (hooks.ts:477)</li></ol><hr><h2 id="✅-task-scheduling-hooks-actually-implemented" tabindex="-1">✅ Task Scheduling Hooks (Actually Implemented) <a class="header-anchor" href="#✅-task-scheduling-hooks-actually-implemented" aria-label="Permalink to &quot;✅ Task Scheduling Hooks (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/client-runtime/src/task-scheduling.ts</code>:</p><ol><li><strong>useMicroTask</strong> ✅ Real (task-scheduling.ts:12)</li><li><strong>useMacroTask</strong> ✅ Real (task-scheduling.ts:27)</li><li><strong>useAnimationFrame</strong> ✅ Real (task-scheduling.ts:42)</li><li><strong>useIdleCallback</strong> ✅ Real (task-scheduling.ts:59)</li></ol><hr><h2 id="✅-pub-sub-hooks-actually-implemented" tabindex="-1">✅ Pub/Sub Hooks (Actually Implemented) <a class="header-anchor" href="#✅-pub-sub-hooks-actually-implemented" aria-label="Permalink to &quot;✅ Pub/Sub Hooks (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/client-runtime/src/pub-sub.ts</code>:</p><ol><li><strong>usePub</strong> ✅ Real (pub-sub.ts:173)</li><li><strong>useSub</strong> ✅ Real (pub-sub.ts:188)</li></ol><hr><h2 id="✅-pagination-hook-actually-implemented" tabindex="-1">✅ Pagination Hook (Actually Implemented) <a class="header-anchor" href="#✅-pagination-hook-actually-implemented" aria-label="Permalink to &quot;✅ Pagination Hook (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/client-runtime/src/usePaginatedServerTask.ts</code>:</p><ol><li><strong>usePaginatedServerTask</strong> ✅ Real (usePaginatedServerTask.ts:101)</li></ol><hr><h2 id="✅-signalr-hook-actually-implemented" tabindex="-1">✅ SignalR Hook (Actually Implemented) <a class="header-anchor" href="#✅-signalr-hook-actually-implemented" aria-label="Permalink to &quot;✅ SignalR Hook (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/client-runtime/src/signalr-hook.ts</code>:</p><ol><li><strong>useSignalR</strong> ✅ Real (signalr-hook.ts:22)</li></ol><hr><h2 id="✅-extension-hooks-actually-implemented" tabindex="-1">✅ Extension Hooks (Actually Implemented) <a class="header-anchor" href="#✅-extension-hooks-actually-implemented" aria-label="Permalink to &quot;✅ Extension Hooks (Actually Implemented)&quot;">​</a></h2><p>Based on <code>src/minimact-*/src/integration.ts</code>:</p><ol><li><strong>useDomElementState</strong> ✅ Real (minimact-punch)</li><li><strong>useDomQuery</strong> ✅ Real (minimact-query)</li><li><strong>useDynamicState</strong> ✅ Real (minimact-dynamic)</li><li><strong>useArea</strong> ✅ Real (minimact-spatial)</li><li><strong>useDecisionTree</strong> ✅ Real (minimact-trees)</li></ol><hr><h2 id="❌-hallucinated-features-not-implemented" tabindex="-1">❌ Hallucinated Features (NOT Implemented) <a class="header-anchor" href="#❌-hallucinated-features-not-implemented" aria-label="Permalink to &quot;❌ Hallucinated Features (NOT Implemented)&quot;">​</a></h2><h3 id="_1-useclientstate-❌-does-not-exist" tabindex="-1">1. useClientState ❌ DOES NOT EXIST <a class="header-anchor" href="#_1-useclientstate-❌-does-not-exist" aria-label="Permalink to &quot;1. useClientState ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/guide/getting-started.md</code> (lines 299-322)</li><li><code>docs-mvp/v1.0/guide/concepts.md</code> (lines 39-47)</li><li><code>docs-mvp/v1.0/api/hooks.md</code> (lines 119-145)</li></ul><p><strong>Claims:</strong></p><ul><li>&quot;Client-only reactive state that never syncs to the server&quot;</li><li>&quot;Perfect for UI state (search query, open/closed, hover)&quot;</li></ul><p><strong>Reality:</strong> Does not exist in codebase. No file <code>useClientState.ts</code> or export in hooks.ts.</p><p><strong>Issue:</strong> Conceptually flawed for dehydrationist architecture (can&#39;t work without client VDOM).</p><p><strong>Action:</strong> REMOVE all references.</p><hr><h3 id="_2-usepredicthint-❌-does-not-exist" tabindex="-1">2. usePredictHint ❌ DOES NOT EXIST <a class="header-anchor" href="#_2-usepredicthint-❌-does-not-exist" aria-label="Permalink to &quot;2. usePredictHint ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/api/hooks.md</code> (lines 148-172)</li></ul><p><strong>Claims:</strong></p><ul><li>&quot;Explicitly tell the prediction system about upcoming state changes&quot;</li><li>&quot;For 100% cache hit rates&quot;</li></ul><p><strong>Reality:</strong> Does not exist in codebase. No file <code>usePredictHint.ts</code> or export.</p><p><strong>Action:</strong> REMOVE or mark as &quot;Planned Feature&quot; (if you actually want to implement it).</p><hr><h3 id="_3-usemarkdown-❌-does-not-exist" tabindex="-1">3. useMarkdown ❌ DOES NOT EXIST <a class="header-anchor" href="#_3-usemarkdown-❌-does-not-exist" aria-label="Permalink to &quot;3. useMarkdown ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/api/hooks.md</code> (lines 175-193)</li></ul><p><strong>Claims:</strong></p><ul><li>&quot;Server-side markdown parsing and rendering&quot;</li><li>&quot;Supports GitHub-flavored markdown&quot;</li></ul><p><strong>Reality:</strong> Does not exist in codebase. No file <code>useMarkdown.ts</code> or export.</p><p><strong>Note:</strong> There IS a <code>MarkdownHelper</code> in C# (Minimact.AspNetCore), but no client-side hook.</p><p><strong>Action:</strong> Either:</p><ul><li>REMOVE from client hooks docs</li><li>Document as C# helper instead (in server-side API docs)</li><li>Implement if you want it</li></ul><hr><h3 id="_4-usetemplate-❌-does-not-exist" tabindex="-1">4. useTemplate ❌ DOES NOT EXIST <a class="header-anchor" href="#_4-usetemplate-❌-does-not-exist" aria-label="Permalink to &quot;4. useTemplate ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/api/hooks.md</code> (lines 196-218)</li></ul><p><strong>Claims:</strong></p><ul><li>&quot;Apply layout templates to components&quot;</li><li>Available layouts: DefaultLayout, SidebarLayout, AuthLayout, AdminLayout</li></ul><p><strong>Reality:</strong> Does not exist in codebase. No file <code>useTemplate.ts</code> or export.</p><p><strong>Note:</strong> There ARE layout components in C#, but no hook to apply them.</p><p><strong>Action:</strong> REMOVE (layouts are applied via C# attributes or routing, not hooks).</p><hr><h3 id="_5-usememo-❌-does-not-exist" tabindex="-1">5. useMemo ❌ DOES NOT EXIST <a class="header-anchor" href="#_5-usememo-❌-does-not-exist" aria-label="Permalink to &quot;5. useMemo ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/guide/concepts.md</code> (line 79)</li></ul><p><strong>Claims:</strong></p><ul><li>Listed as a supported hook</li></ul><p><strong>Reality:</strong> Does not exist. Not in hooks.ts.</p><p><strong>Action:</strong> REMOVE from &quot;supported hooks&quot; list (or implement if needed).</p><hr><h3 id="_6-usecallback-❌-does-not-exist" tabindex="-1">6. useCallback ❌ DOES NOT EXIST <a class="header-anchor" href="#_6-usecallback-❌-does-not-exist" aria-label="Permalink to &quot;6. useCallback ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/guide/concepts.md</code> (line 80)</li></ul><p><strong>Claims:</strong></p><ul><li>Listed as a supported hook</li></ul><p><strong>Reality:</strong> Does not exist. Not in hooks.ts.</p><p><strong>Action:</strong> REMOVE from &quot;supported hooks&quot; list (or implement if needed).</p><hr><h3 id="_7-usecontext-❌-does-not-exist" tabindex="-1">7. useContext ❌ DOES NOT EXIST <a class="header-anchor" href="#_7-usecontext-❌-does-not-exist" aria-label="Permalink to &quot;7. useContext ❌ DOES NOT EXIST&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>docs-mvp/v1.0/guide/concepts.md</code> (line 81)</li></ul><p><strong>Claims:</strong></p><ul><li>Listed as a supported hook</li></ul><p><strong>Reality:</strong> Does not exist. Not in hooks.ts.</p><p><strong>Action:</strong> REMOVE from &quot;supported hooks&quot; list (or implement if needed).</p><hr><h2 id="other-documentation-issues" tabindex="-1">Other Documentation Issues <a class="header-anchor" href="#other-documentation-issues" aria-label="Permalink to &quot;Other Documentation Issues&quot;">​</a></h2><h3 id="updateclientcomputedstate-exists-but-misleading" tabindex="-1">UpdateClientComputedState (Exists but Misleading) <a class="header-anchor" href="#updateclientcomputedstate-exists-but-misleading" aria-label="Permalink to &quot;UpdateClientComputedState (Exists but Misleading)&quot;">​</a></h3><p><strong>Documented in:</strong></p><ul><li><code>features_complete.md</code> mentions &quot;Client-computed state integration&quot;</li><li>Code exists in <code>MiniactHub.cs</code></li></ul><p><strong>Reality:</strong></p><ul><li>The C# method exists</li><li>But there&#39;s no client-side hook that calls it</li><li>It&#39;s unclear how users would actually use this</li></ul><p><strong>Action:</strong> Either:</p><ul><li>Create a client hook that uses it (e.g., <code>useComputedState</code>)</li><li>Document it as a low-level API for advanced users</li><li>Remove from feature list if not user-facing</li></ul><hr><h2 id="recommendations" tabindex="-1">Recommendations <a class="header-anchor" href="#recommendations" aria-label="Permalink to &quot;Recommendations&quot;">​</a></h2><h3 id="immediate-actions-high-priority" tabindex="-1">Immediate Actions (High Priority) <a class="header-anchor" href="#immediate-actions-high-priority" aria-label="Permalink to &quot;Immediate Actions (High Priority)&quot;">​</a></h3><ol><li><p><strong>Remove useClientState</strong> from all docs</p><ul><li><code>getting-started.md</code> (section 299-322)</li><li><code>concepts.md</code> (section 39-47)</li><li><code>hooks.md</code> (section 119-145)</li></ul></li><li><p><strong>Remove usePredictHint</strong> from hooks.md</p><ul><li>Or mark as &quot;Planned&quot; if you want to implement</li></ul></li><li><p><strong>Remove useMarkdown</strong> from hooks.md</p><ul><li>Or move to C# API docs if MarkdownHelper should be documented</li></ul></li><li><p><strong>Remove useTemplate</strong> from hooks.md</p><ul><li>Layout usage should be documented differently</li></ul></li><li><p><strong>Fix &quot;Supported Hooks&quot; list</strong> in concepts.md</p><ul><li>Remove: useMemo, useCallback, useContext</li><li>Add: usePub, useSub, useSignalR, task scheduling hooks</li></ul></li></ol><h3 id="create-accurate-hook-list" tabindex="-1">Create Accurate Hook List <a class="header-anchor" href="#create-accurate-hook-list" aria-label="Permalink to &quot;Create Accurate Hook List&quot;">​</a></h3><p><strong>Core Hooks:</strong></p><ul><li>useState</li><li>useEffect</li><li>useRef</li></ul><p><strong>Server Task Hooks:</strong></p><ul><li>useServerTask</li><li>usePaginatedServerTask</li></ul><p><strong>Pub/Sub Hooks:</strong></p><ul><li>usePub</li><li>useSub</li></ul><p><strong>SignalR Hook:</strong></p><ul><li>useSignalR</li></ul><p><strong>Task Scheduling Hooks:</strong></p><ul><li>useMicroTask</li><li>useMacroTask</li><li>useAnimationFrame</li><li>useIdleCallback</li></ul><p><strong>Extension Hooks:</strong></p><ul><li>useDomElementState (minimact-punch)</li><li>useDomQuery (minimact-query)</li><li>useDynamicState (minimact-dynamic)</li><li>useArea (minimact-spatial)</li><li>useDecisionTree (minimact-trees)</li></ul><hr><h2 id="future-considerations" tabindex="-1">Future Considerations <a class="header-anchor" href="#future-considerations" aria-label="Permalink to &quot;Future Considerations&quot;">​</a></h2><h3 id="hooks-you-might-want-to-implement" tabindex="-1">Hooks You Might Want to Implement <a class="header-anchor" href="#hooks-you-might-want-to-implement" aria-label="Permalink to &quot;Hooks You Might Want to Implement&quot;">​</a></h3><ol><li><strong>useMemo</strong> - Memoize expensive computations</li><li><strong>useCallback</strong> - Memoize callbacks</li><li><strong>useComputedState</strong> - For UpdateClientComputedState integration</li><li><strong>usePredictHint</strong> - Explicit prediction hints (if valuable)</li></ol><h3 id="hooks-that-don-t-make-sense" tabindex="-1">Hooks That Don&#39;t Make Sense <a class="header-anchor" href="#hooks-that-don-t-make-sense" aria-label="Permalink to &quot;Hooks That Don&#39;t Make Sense&quot;">​</a></h3><ol><li><strong>useClientState</strong> - Conceptually flawed (no client VDOM)</li><li><strong>useContext</strong> - Unclear how it would work server-side</li><li><strong>useTemplate</strong> - Layouts are C# concern, not hook concern</li></ol><hr><h2 id="search-replace-guide" tabindex="-1">Search &amp; Replace Guide <a class="header-anchor" href="#search-replace-guide" aria-label="Permalink to &quot;Search &amp; Replace Guide&quot;">​</a></h2><p>Use these searches to find and remove hallucinated content:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useClientState references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useClientState&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all usePredictHint references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;usePredictHint&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useMarkdown references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useMarkdown&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useTemplate references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useTemplate&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useMemo references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useMemo&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useCallback references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useCallback&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find all useContext references</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;useContext&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-mvp/</span></span></code></pre></div><hr><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p><strong>Real Features:</strong> 15 hooks actually exist and work <strong>Hallucinated Features:</strong> 7 documented hooks don&#39;t exist</p><p><strong>Impact:</strong> Users following the docs will try to use hooks that don&#39;t exist, leading to confusion and frustration.</p><p><strong>Priority:</strong> Clean up documentation BEFORE public release.</p><hr><h2 id="files-to-update" tabindex="-1">Files to Update <a class="header-anchor" href="#files-to-update" aria-label="Permalink to &quot;Files to Update&quot;">​</a></h2><ol><li><p><code>docs-mvp/v1.0/guide/getting-started.md</code></p><ul><li>Remove useClientState section (lines 299-322)</li><li>Update examples to use only real hooks</li></ul></li><li><p><code>docs-mvp/v1.0/guide/concepts.md</code></p><ul><li>Remove useClientState section (lines 39-47)</li><li>Fix &quot;Supported Hooks&quot; list (lines 76-84)</li></ul></li><li><p><code>docs-mvp/v1.0/api/hooks.md</code></p><ul><li>Remove: useClientState (119-145)</li><li>Remove: usePredictHint (148-172)</li><li>Remove: useMarkdown (175-193)</li><li>Remove: useTemplate (196-218)</li><li>Add: usePub, useSub, useSignalR, task scheduling hooks</li></ul></li><li><p><code>docs-mvp/DOCUMENTATION_IMPROVEMENTS.md</code></p><ul><li>Update to reflect accurate feature list</li></ul></li></ol>`,132)])])}const m=t(a,[["render",l]]);export{h as __pageData,m as default};
