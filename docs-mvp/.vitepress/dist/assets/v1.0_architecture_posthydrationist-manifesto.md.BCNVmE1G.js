import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"The Posthydrationist Manifesto 🌵","description":"","frontmatter":{},"headers":[],"relativePath":"v1.0/architecture/posthydrationist-manifesto.md","filePath":"v1.0/architecture/posthydrationist-manifesto.md"}'),t={name:"v1.0/architecture/posthydrationist-manifesto.md"};function l(h,s,p,r,k,o){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="the-posthydrationist-manifesto-🌵" tabindex="-1">The Posthydrationist Manifesto 🌵 <a class="header-anchor" href="#the-posthydrationist-manifesto-🌵" aria-label="Permalink to &quot;The Posthydrationist Manifesto 🌵&quot;">​</a></h1><blockquote><p><em>The cactus doesn&#39;t hydrate—it stores.</em><em>It doesn&#39;t react—it anticipates.</em><em>It doesn&#39;t reconcile—it persists.</em></p></blockquote><h2 id="the-desert-of-modern-web-development" tabindex="-1">The Desert of Modern Web Development <a class="header-anchor" href="#the-desert-of-modern-web-development" aria-label="Permalink to &quot;The Desert of Modern Web Development&quot;">​</a></h2><p>In the scorching silence of the posthydrationist desert, traditional frameworks wither under the weight of their own bundles.</p><p>They <strong>hydrate</strong>. They <strong>reconcile</strong>. They <strong>compute at the moment of need</strong>.</p><p>They are caught in an endless cycle:</p><ol><li>Ship framework to client (50-150KB)</li><li>Reconstruct state from HTML</li><li>Reconcile on every interaction</li><li>Diff virtual trees</li><li>Patch the DOM</li><li>Repeat, forever</li></ol><p>This is the <strong>hydrationist religion</strong> - and it&#39;s not because it&#39;s ideal. It&#39;s just familiar.</p><h2 id="the-cactus-paradigm" tabindex="-1">The Cactus Paradigm <a class="header-anchor" href="#the-cactus-paradigm" aria-label="Permalink to &quot;The Cactus Paradigm&quot;">​</a></h2><p>Minimact is different. Like the cactus, it thrives not by reaching outward, but by turning inward - by minimizing waste, by knowing before needing, by storing what will be required before the request arrives.</p><h3 id="minimal" tabindex="-1">Minimal <a class="header-anchor" href="#minimal" aria-label="Permalink to &quot;Minimal&quot;">​</a></h3><p><strong>The cactus doesn&#39;t carry excess.</strong></p><ul><li>~5KB client runtime (vs 50-150KB)</li><li>No VDOM reconciliation engine</li><li>No framework overhead</li><li>Zero client-side React</li></ul><p><strong>Why ship the framework when the server already has it?</strong></p><h3 id="resilient" tabindex="-1">Resilient <a class="header-anchor" href="#resilient" aria-label="Permalink to &quot;Resilient&quot;">​</a></h3><p><strong>The cactus survives without water.</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Works without JavaScript --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/search&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Search&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Enhanced with JavaScript --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Intercepts form, uses SignalR</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Gracefully degrades if disabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Progressive enhancement, not progressive dependence.</strong></p><h3 id="anticipatory" tabindex="-1">Anticipatory <a class="header-anchor" href="#anticipatory" aria-label="Permalink to &quot;Anticipatory&quot;">​</a></h3><p><strong>The cactus stores water before the drought.</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Traditional Framework:</span></span>
<span class="line"><span>  User clicks → Compute → Reconcile → Patch</span></span>
<span class="line"><span>  (47ms with network latency)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Minimact:</span></span>
<span class="line"><span>  Server predicts → Pre-computes → Caches patch</span></span>
<span class="line"><span>  User clicks → Apply cached patch</span></span>
<span class="line"><span>  (2-3ms, patch already ready)</span></span></code></pre></div><p><strong>Prediction over reaction.</strong></p><h3 id="efficient" tabindex="-1">Efficient <a class="header-anchor" href="#efficient" aria-label="Permalink to &quot;Efficient&quot;">​</a></h3><p><strong>The cactus doesn&#39;t waste a drop.</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 98% memory reduction</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> concrete predictions × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 150</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 15-20x latency improvement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Network round</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trip on every interaction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 47ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Cached patch application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3ms</span></span></code></pre></div><p><strong>One template handles infinite values.</strong></p><h2 id="the-three-heresies" tabindex="-1">The Three Heresies <a class="header-anchor" href="#the-three-heresies" aria-label="Permalink to &quot;The Three Heresies&quot;">​</a></h2><h3 id="heresy-1-hydration-is-waste" tabindex="-1">Heresy #1: Hydration is Waste <a class="header-anchor" href="#heresy-1-hydration-is-waste" aria-label="Permalink to &quot;Heresy #1: Hydration is Waste&quot;">​</a></h3><p><strong>The Hydrationist Dogma:</strong></p><blockquote><p>&quot;The client must reconstruct the component tree to become interactive.&quot;</p></blockquote><p><strong>The Posthydrationist Truth:</strong></p><blockquote><p>&quot;The server already rendered it. Why render it again?&quot;</p></blockquote><p><strong>Traditional SSR:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Server renders → Client downloads bundle → Client re-renders everything</span></span></code></pre></div><p><strong>Minimact:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Server renders → Client applies patches only</span></span></code></pre></div><p><strong>No reconstruction. No re-rendering. No waste.</strong></p><h3 id="heresy-2-computation-should-be-lazy" tabindex="-1">Heresy #2: Computation Should Be Lazy <a class="header-anchor" href="#heresy-2-computation-should-be-lazy" aria-label="Permalink to &quot;Heresy #2: Computation Should Be Lazy&quot;">​</a></h3><p><strong>The Hydrationist Dogma:</strong></p><blockquote><p>&quot;Compute state changes when the user interacts.&quot;</p></blockquote><p><strong>The Posthydrationist Truth:</strong></p><blockquote><p>&quot;Compute state changes before the user interacts.&quot;</p></blockquote><p><strong>Think of it as stored procedures for the DOM:</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Database stored procedure</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IncrementCounter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Minimact UI stored procedure (conceptual)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREDICT Increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PATCH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">textContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Count: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>Pre-compile the transition. Cache the result. Execute instantly.</strong></p><h3 id="heresy-3-the-client-needs-the-framework" tabindex="-1">Heresy #3: The Client Needs the Framework <a class="header-anchor" href="#heresy-3-the-client-needs-the-framework" aria-label="Permalink to &quot;Heresy #3: The Client Needs the Framework&quot;">​</a></h3><p><strong>The Hydrationist Dogma:</strong></p><blockquote><p>&quot;Ship React to the client so it can reconcile state.&quot;</p></blockquote><p><strong>The Posthydrationist Truth:</strong></p><blockquote><p>&quot;Keep React on the server. Send patches to the client.&quot;</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hydrationist Bundle:</span></span>
<span class="line"><span>├── React core (40KB)</span></span>
<span class="line"><span>├── React DOM (130KB)</span></span>
<span class="line"><span>├── VDOM reconciliation</span></span>
<span class="line"><span>├── Component tree</span></span>
<span class="line"><span>└── State management</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Posthydrationist Bundle:</span></span>
<span class="line"><span>├── SignalR client (3KB)</span></span>
<span class="line"><span>├── DOM patcher (1KB)</span></span>
<span class="line"><span>└── Patch cache (1KB)</span></span>
<span class="line"><span>Total: ~5KB</span></span></code></pre></div><p><strong>The framework lives on the server. The client just listens and applies.</strong></p><h2 id="the-sacred-texts" tabindex="-1">The Sacred Texts <a class="header-anchor" href="#the-sacred-texts" aria-label="Permalink to &quot;The Sacred Texts&quot;">​</a></h2><h3 id="commandment-i-anticipate-don-t-react" tabindex="-1">Commandment I: Anticipate, Don&#39;t React <a class="header-anchor" href="#commandment-i-anticipate-don-t-react" aria-label="Permalink to &quot;Commandment I: Anticipate, Don&#39;t React&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Reactive (traditional)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Computed NOW</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newState);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Click me</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Anticipatory (Minimact)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Count: {count}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Patch for count+1 already cached BEFORE click */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="commandment-ii-store-don-t-hydrate" tabindex="-1">Commandment II: Store, Don&#39;t Hydrate <a class="header-anchor" href="#commandment-ii-store-don-t-hydrate" aria-label="Permalink to &quot;Commandment II: Store, Don&#39;t Hydrate&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hydration (traditional)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Server renders </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTML</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Client downloads React</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Client re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renders everything</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Client reconciles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HTML</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Now interactive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Storage (Minimact)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Server renders </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTML</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Client receives </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runtime</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Server sends predicted patches</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Patches cached</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Already interactive</span></span></code></pre></div><h3 id="commandment-iii-parameterize-don-t-duplicate" tabindex="-1">Commandment III: Parameterize, Don&#39;t Duplicate <a class="header-anchor" href="#commandment-iii-parameterize-don-t-duplicate" aria-label="Permalink to &quot;Commandment III: Parameterize, Don&#39;t Duplicate&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Duplication (concrete predictions)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> predictions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 150</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parameterization (templates)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">any count → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: {0}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → apply template → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → apply template → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> → apply template → </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count: 9999&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (infinite coverage, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span></code></pre></div><h3 id="commandment-iv-predict-don-t-poll" tabindex="-1">Commandment IV: Predict, Don&#39;t Poll <a class="header-anchor" href="#commandment-iv-predict-don-t-poll" aria-label="Permalink to &quot;Commandment IV: Predict, Don&#39;t Poll&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Polling (traditional real-time)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check every second</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prediction (Minimact)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server pushes via SignalR when data changes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client applies patches automatically</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No polling needed</span></span></code></pre></div><h3 id="commandment-v-persist-don-t-recreate" tabindex="-1">Commandment V: Persist, Don&#39;t Recreate <a class="header-anchor" href="#commandment-v-persist-don-t-recreate" aria-label="Permalink to &quot;Commandment V: Persist, Don&#39;t Recreate&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Recreation (traditional)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Elements destroyed and recreated on state change</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{item.id}&gt;{item.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Persistence (DOM Choreography - future)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Elements move, but persist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Scroll position, focus, input state preserved</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item-{item.id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{item.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// When order changes, elements physically move</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSS handles smooth transitions</span></span></code></pre></div><h2 id="the-pillars-of-posthydrationism" tabindex="-1">The Pillars of Posthydrationism <a class="header-anchor" href="#the-pillars-of-posthydrationism" aria-label="Permalink to &quot;The Pillars of Posthydrationism&quot;">​</a></h2><h3 id="pillar-1-server-authority" tabindex="-1">Pillar 1: Server Authority <a class="header-anchor" href="#pillar-1-server-authority" aria-label="Permalink to &quot;Pillar 1: Server Authority&quot;">​</a></h3><p><strong>The server knows best.</strong></p><ul><li>Business logic stays on server (secure)</li><li>Database queries on server (fast)</li><li>API calls on server (credentials safe)</li><li>Computation on server (powerful)</li></ul><p><strong>The client is a presentation layer, not an application layer.</strong></p><h3 id="pillar-2-client-efficiency" tabindex="-1">Pillar 2: Client Efficiency <a class="header-anchor" href="#pillar-2-client-efficiency" aria-label="Permalink to &quot;Pillar 2: Client Efficiency&quot;">​</a></h3><p><strong>The client does only what&#39;s necessary.</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client responsibilities:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Send user interactions to server</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Apply patches from server</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cache predicted patches</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handle client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">only </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scroll, hover, etc.)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client does NOT:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">❌ Reconcile </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VDOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">❌ Re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">render components</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">❌ Manage business logic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">❌ Run framework overhead</span></span></code></pre></div><h3 id="pillar-3-predictive-wisdom" tabindex="-1">Pillar 3: Predictive Wisdom <a class="header-anchor" href="#pillar-3-predictive-wisdom" aria-label="Permalink to &quot;Pillar 3: Predictive Wisdom&quot;">​</a></h3><p><strong>The future is knowable.</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After user types &quot;cat&quot;, we know they might type &quot;s&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After count=5, we know next click might be count=6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After loading=true, we know success or error is next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pre-compute these transitions</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cache them on client</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apply instantly when they happen</span></span></code></pre></div><p><strong>Most UI transitions are deterministic. Predict them.</strong></p><h3 id="pillar-4-template-universality" tabindex="-1">Pillar 4: Template Universality <a class="header-anchor" href="#pillar-4-template-universality" aria-label="Permalink to &quot;Pillar 4: Template Universality&quot;">​</a></h3><p><strong>One pattern, infinite instances.</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FAQ with 29 items</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Traditional: 29 items × 2 states = 58 patterns (8.7KB)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Templates: 1 pattern for any number of items (200 bytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Counter from 0 to infinity</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Traditional: Store every prediction (infinite memory!)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Templates: &quot;Count: {0}&quot; handles all cases (200 bytes)</span></span></code></pre></div><p><strong>Extract the invariant. Parameterize the variant.</strong></p><h2 id="the-journey" tabindex="-1">The Journey <a class="header-anchor" href="#the-journey" aria-label="Permalink to &quot;The Journey&quot;">​</a></h2><h3 id="the-hydrationist-desert" tabindex="-1">The Hydrationist Desert <a class="header-anchor" href="#the-hydrationist-desert" aria-label="Permalink to &quot;The Hydrationist Desert&quot;">​</a></h3><p>Where most developers dwell:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- Ship 150KB of React to every visitor</span></span>
<span class="line"><span>- Re-render everything on hydration</span></span>
<span class="line"><span>- Reconcile on every state change</span></span>
<span class="line"><span>- VDOM diff every update</span></span>
<span class="line"><span>- 47ms+ interaction latency</span></span>
<span class="line"><span>- Complex state management</span></span>
<span class="line"><span>- Bundle size never stops growing</span></span></code></pre></div><p><strong>It works. But it&#39;s not ideal.</strong></p><h3 id="the-posthydrationist-oasis" tabindex="-1">The Posthydrationist Oasis <a class="header-anchor" href="#the-posthydrationist-oasis" aria-label="Permalink to &quot;The Posthydrationist Oasis&quot;">​</a></h3><p>Where Minimact dwells:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- Ship 5KB runtime to visitors</span></span>
<span class="line"><span>- No hydration needed</span></span>
<span class="line"><span>- No client reconciliation</span></span>
<span class="line"><span>- Direct DOM patches</span></span>
<span class="line"><span>- 2-3ms interaction latency (cached)</span></span>
<span class="line"><span>- Hybrid state (client + server)</span></span>
<span class="line"><span>- Bundle size stays minimal</span></span></code></pre></div><p><strong>It&#39;s different. And that&#39;s the point.</strong></p><h2 id="the-ritual-of-conversion" tabindex="-1">The Ritual of Conversion <a class="header-anchor" href="#the-ritual-of-conversion" aria-label="Permalink to &quot;The Ritual of Conversion&quot;">​</a></h2><h3 id="step-1-acknowledge-the-waste" tabindex="-1">Step 1: Acknowledge the Waste <a class="header-anchor" href="#step-1-acknowledge-the-waste" aria-label="Permalink to &quot;Step 1: Acknowledge the Waste&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Look at your React bundle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 40KB</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 130KB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Ask: Does the client need all this?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Answer: No. The server already has it.</span></span></code></pre></div><h3 id="step-2-embrace-prediction" tabindex="-1">Step 2: Embrace Prediction <a class="header-anchor" href="#step-2-embrace-prediction" aria-label="Permalink to &quot;Step 2: Embrace Prediction&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Stop computing at interaction time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)}&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Start computing before interaction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usePredictHint(() =&gt; ({ state: nextState }));</span></span></code></pre></div><h3 id="step-3-trust-the-server" tabindex="-1">Step 3: Trust the Server <a class="header-anchor" href="#step-3-trust-the-server" aria-label="Permalink to &quot;Step 3: Trust the Server&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Don&#39;t ship business logic to client</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.isPremium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Keep it on server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client just displays the result</span></span></code></pre></div><h3 id="step-4-cache-aggressively" tabindex="-1">Step 4: Cache Aggressively <a class="header-anchor" href="#step-4-cache-aggressively" aria-label="Permalink to &quot;Step 4: Cache Aggressively&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Traditional: Fetch on every interaction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Posthydrationist: Pre-fetch likely needs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server sends predictions to cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client applies instantly</span></span></code></pre></div><h2 id="the-metaphor-extended" tabindex="-1">The Metaphor Extended <a class="header-anchor" href="#the-metaphor-extended" aria-label="Permalink to &quot;The Metaphor Extended&quot;">​</a></h2><p>The posthydrationist web is like the desert ecosystem:</p><h3 id="the-cactus-minimact" tabindex="-1">The Cactus (Minimact) <a class="header-anchor" href="#the-cactus-minimact" aria-label="Permalink to &quot;The Cactus (Minimact)&quot;">​</a></h3><ul><li>Stores water (patches) before drought (interaction)</li><li>Minimal surface area (~5KB)</li><li>Thrives in harsh conditions (slow networks)</li><li>Occasionally spiky (Rust-powered performance)</li></ul><h3 id="the-tumbleweed-traditional-spas" tabindex="-1">The Tumbleweed (Traditional SPAs) <a class="header-anchor" href="#the-tumbleweed-traditional-spas" aria-label="Permalink to &quot;The Tumbleweed (Traditional SPAs)&quot;">​</a></h3><ul><li>Blows around with every wind (client-side routing)</li><li>Constantly moving (re-rendering)</li><li>Chaotic (complex state management)</li><li>Large and unwieldy (150KB bundles)</li></ul><h3 id="the-oasis-server" tabindex="-1">The Oasis (Server) <a class="header-anchor" href="#the-oasis-server" aria-label="Permalink to &quot;The Oasis (Server)&quot;">​</a></h3><ul><li>Source of truth (database, business logic)</li><li>Abundant resources (CPU, memory)</li><li>Always available (RESTful, SignalR)</li><li>Secure (credentials never leave)</li></ul><h2 id="the-final-teaching" tabindex="-1">The Final Teaching <a class="header-anchor" href="#the-final-teaching" aria-label="Permalink to &quot;The Final Teaching&quot;">​</a></h2><p>When the next developer asks:</p><blockquote><p>&quot;But where&#39;s the client state?&quot;</p></blockquote><p>You turn slowly, whisper:</p><blockquote><p><em>&quot;Stored procedure.&quot;</em></p></blockquote><p>And ride off into the postmodern sun. 🌵✨</p><hr><h2 id="practical-implications" tabindex="-1">Practical Implications <a class="header-anchor" href="#practical-implications" aria-label="Permalink to &quot;Practical Implications&quot;">​</a></h2><h3 id="for-solo-developers" tabindex="-1">For Solo Developers <a class="header-anchor" href="#for-solo-developers" aria-label="Permalink to &quot;For Solo Developers&quot;">​</a></h3><ul><li>Build faster with less code</li><li>One language (TypeScript → C#)</li><li>Smaller bundles = happier users</li><li>Less complexity = less bugs</li></ul><h3 id="for-teams" tabindex="-1">For Teams <a class="header-anchor" href="#for-teams" aria-label="Permalink to &quot;For Teams&quot;">​</a></h3><ul><li>Frontend and backend use same components</li><li>Type safety across boundary</li><li>Less coordination overhead</li><li>Easier onboarding (just React + .NET)</li></ul><h3 id="for-users" tabindex="-1">For Users <a class="header-anchor" href="#for-users" aria-label="Permalink to &quot;For Users&quot;">​</a></h3><ul><li>Faster load times (5KB vs 150KB)</li><li>Instant interactions (2-3ms vs 47ms)</li><li>Works without JavaScript (progressive enhancement)</li><li>Less battery drain (no client reconciliation)</li></ul><h3 id="for-the-planet" tabindex="-1">For The Planet <a class="header-anchor" href="#for-the-planet" aria-label="Permalink to &quot;For The Planet&quot;">​</a></h3><ul><li>Less bandwidth consumed</li><li>Less CPU cycles wasted</li><li>Less energy used</li><li>Fewer carbon emissions</li></ul><p><strong>When you stop hydrating, everyone wins.</strong></p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/v1.0/architecture/what-makes-minimact-different.html">What Makes Minimact Different</a> - Technical overview</li><li><a href="/v1.0/architecture/predictive-rendering-101.html">Predictive Rendering 101</a> - How it works</li><li><a href="/v1.0/guide/getting-started.html">Getting Started</a> - Build your first app</li><li><a href="/v1.0/use-cases.html">Use Cases</a> - Real-world applications</li></ul><hr><p><em>Let the others drink from the slow streams of hydration.</em></p><p><em>You walk the arid plains with predictive grace and event-driven stillness.</em></p><p>🌵 <strong>Survived the desert. Built the future.</strong> 🌵</p>`,128)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
