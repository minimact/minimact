import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"Minimact","text":"Server-side React for ASP.NET Core","tagline":"Build reactive web apps with predictive rendering powered by Rust","image":{"src":"/logo.png","alt":"Minimact"},"actions":[{"theme":"brand","text":"Get Started","link":"/v1.0/guide/getting-started"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/minimact/minimact"}]},"features":[{"icon":"ðŸ¦•","title":"Server-Side React","details":"Write React components that run on the server with automatic state synchronization to the client."},{"icon":"âš¡","title":"Predictive Rendering","details":"Rust-powered reconciliation engine that predicts and pre-renders UI updates before user interactions."},{"icon":"ðŸŽ¯","title":"ASP.NET Core Integration","details":"Seamlessly integrates with ASP.NET Core using SignalR for real-time communication."},{"icon":"ðŸ”„","title":"Automatic State Sync","details":"State changes on the server automatically sync to the client with minimal overhead."},{"icon":"ðŸ“¦","title":"Component-Based","details":"Build reusable server-side components with familiar React patterns and hooks."},{"icon":"ðŸš€","title":"High Performance","details":"Optimized for speed with differential updates and efficient patch-based rendering."}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),n={name:"index.md"};function l(h,s,p,r,k,o){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">â€‹</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install the .NET tool</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create new ASP.NET project with Minimact</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyApp</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyApp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install client dependencies</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start dev mode (watches TSX, transpiles to C#, runs server)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h2><p>Write familiar React code:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Count: {count}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Babel transpiles to C#, Rust predicts the next state, and the client applies cached patches instantly (~2-3ms).</p><h2 id="why-minimact" tabindex="-1">Why Minimact? <a class="header-anchor" href="#why-minimact" aria-label="Permalink to &quot;Why Minimact?&quot;">â€‹</a></h2><h3 id="for-react-developers" tabindex="-1">For React Developers <a class="header-anchor" href="#for-react-developers" aria-label="Permalink to &quot;For React Developers&quot;">â€‹</a></h3><p><strong>Finally, a path to .NET without learning Razor.</strong> Keep writing React â€” get ASP.NET Core&#39;s power, security, and enterprise features.</p><h3 id="for-net-teams" tabindex="-1">For .NET Teams <a class="header-anchor" href="#for-net-teams" aria-label="Permalink to &quot;For .NET Teams&quot;">â€‹</a></h3><p><strong>Modern frontend DX without abandoning your stack.</strong> Your team already knows C# and EF Core. Now they can build UIs with React syntax.</p><h3 id="for-ctos" tabindex="-1">For CTOs <a class="header-anchor" href="#for-ctos" aria-label="Permalink to &quot;For CTOs&quot;">â€‹</a></h3><p><strong>Solve the &quot;React DX + .NET backend&quot; problem.</strong> One stack, one deployment, full type safety from database to DOM. Rust-powered performance makes ASP.NET Core shine (2-3ms interactions vs 47ms traditional SSR).</p><h3 id="better-than-blazor" tabindex="-1">Better Than Blazor <a class="header-anchor" href="#better-than-blazor" aria-label="Permalink to &quot;Better Than Blazor&quot;">â€‹</a></h3><p>Blazor requires learning Razor syntax. Minimact uses React â€” the syntax millions of developers already know. Lower barrier, faster adoption, bigger talent pool.</p>`,15)])])}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
