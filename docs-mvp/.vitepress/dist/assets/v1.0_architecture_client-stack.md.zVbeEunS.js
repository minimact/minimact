import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"Minimact Client Architecture: Layered Reactive DOM Stack","description":"","frontmatter":{},"headers":[],"relativePath":"v1.0/architecture/client-stack.md","filePath":"v1.0/architecture/client-stack.md"}'),e={name:"v1.0/architecture/client-stack.md"};function l(p,s,h,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="minimact-client-architecture-layered-reactive-dom-stack" tabindex="-1">Minimact Client Architecture: Layered Reactive DOM Stack <a class="header-anchor" href="#minimact-client-architecture-layered-reactive-dom-stack" aria-label="Permalink to &quot;Minimact Client Architecture: Layered Reactive DOM Stack&quot;">​</a></h1><p>Minimact&#39;s client modules form a coherent hierarchy of reactive capabilities — from predictive rendering to distributed DOM synchronization.</p><p><strong>Each layer is a separate npm package.</strong> Install only what you need.</p><h2 id="the-evolution-stack" tabindex="-1">The Evolution Stack <a class="header-anchor" href="#the-evolution-stack" aria-label="Permalink to &quot;The Evolution Stack&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-quantum         │  ← 6️⃣ Distributed Identity</span></span>
<span class="line"><span>│   Entanglement Protocol    │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-trees           │  ← 5️⃣ Semantic Trees</span></span>
<span class="line"><span>│   Declarative State        │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-spatial         │  ← 4️⃣ Layout &amp; Flow Analysis</span></span>
<span class="line"><span>│   Viewport as 2D Database  │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-dynamic         │  ← 3️⃣ Function-Based Binding</span></span>
<span class="line"><span>│   Structure/Logic Split    │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-query           │  ← 2️⃣ SQL for Reactive DOM</span></span>
<span class="line"><span>│   Relational Queries       │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact-punch           │  ← 1️⃣ DOM as Reactive State</span></span>
<span class="line"><span>│   80+ Observable Props     │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span>
<span class="line"><span>            ▲</span></span>
<span class="line"><span>┌────────────────────────────┐</span></span>
<span class="line"><span>│   minimact (core)          │  ← 0️⃣ Predictive Rendering</span></span>
<span class="line"><span>│   ~5KB Runtime             │</span></span>
<span class="line"><span>└────────────────────────────┘</span></span></code></pre></div><p><strong>The Journey:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>React → Reactive DOM → Queryable DOM → Predictive Layout → Distributed DOM</span></span></code></pre></div><hr><h2 id="_0️⃣-minimact-core" tabindex="-1">0️⃣ minimact (Core) <a class="header-anchor" href="#_0️⃣-minimact-core" aria-label="Permalink to &quot;0️⃣ minimact (Core)&quot;">​</a></h2><p><strong>Foundation:</strong> Predictive rendering, state hooks, and patch cache execution.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact</span></span></code></pre></div><h3 id="what-it-includes" tabindex="-1">What It Includes <a class="header-anchor" href="#what-it-includes" aria-label="Permalink to &quot;What It Includes&quot;">​</a></h3><ul><li><strong>Hooks:</strong> <code>useState</code>, <code>useEffect</code>, <code>useRef</code>, <code>useClientState</code>, <code>useServerTask</code></li><li><strong>Predictive patches</strong> via <code>usePredictHint</code></li><li><strong>Server-rendered HTML</strong> with client patch application</li><li><strong>~5KB runtime</strong> (gzipped)</li></ul><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server-managed state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client-only state (no server round-trip)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setIsOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useClientState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Long-running server tasks with progress</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useServerTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">updateProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Complete!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>See:</strong> <a href="/v1.0/api/hooks.html">Core Hooks Documentation</a></p><hr><h2 id="_1️⃣-minimact-punch-dom-as-reactive-data-source" tabindex="-1">1️⃣ minimact-punch: DOM as Reactive Data Source <a class="header-anchor" href="#_1️⃣-minimact-punch-dom-as-reactive-data-source" aria-label="Permalink to &quot;1️⃣ minimact-punch: DOM as Reactive Data Source&quot;">​</a></h2><p><strong>Capability:</strong> Make the DOM observable — structure, pseudo-state, styles, lifecycle.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-punch</span></span></code></pre></div><h3 id="what-it-adds" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong><code>useDomElementState(selector)</code></strong> - Makes DOM queryable like a database</li><li><strong>80+ reactive properties</strong> (isIntersecting, childrenCount, attributes, classList, etc.)</li><li><strong>MutationObserver integration</strong> (automatic updates)</li><li><strong>IntersectionObserver integration</strong> (viewport tracking)</li><li><strong>Statistical aggregates</strong> (<code>.vals.avg()</code>, <code>.vals.sum()</code>, <code>.vals.median()</code>)</li><li><strong>Collection queries</strong> (count, map, filter, find)</li><li><strong>MES Silver certified</strong> (Minimact Extension Standards)</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useDomElementState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-punch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AdaptiveHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scrollContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDomElementState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#main-content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{scrollContainer.scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;compact&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;full&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Header adapts based on scroll position */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>See:</strong> <a href="/v1.0/use-cases.html#dom-as-data-source-extensions">DOM as Data Source Use Cases</a></p><hr><h2 id="_2️⃣-minimact-query-sql-for-the-dom" tabindex="-1">2️⃣ minimact-query: SQL for the DOM <a class="header-anchor" href="#_2️⃣-minimact-query-sql-for-the-dom" aria-label="Permalink to &quot;2️⃣ minimact-query: SQL for the DOM&quot;">​</a></h2><p><strong>Capability:</strong> Query reactive DOM state declaratively with SQL semantics.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-query</span></span></code></pre></div><h3 id="what-it-adds-1" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds-1" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong><code>useDomQuery()</code></strong> - Query DOM like a relational database</li><li><strong>Full SQL semantics</strong> (SELECT, FROM, WHERE, JOIN, GROUP BY, ORDER BY, LIMIT)</li><li><strong>Aggregate functions</strong> (COUNT, SUM, AVG, MIN, MAX, STDDEV)</li><li><strong>Set operations</strong> (UNION, INTERSECT, EXCEPT, DISTINCT)</li><li><strong>Reactive by default</strong> (queries auto-update when DOM changes)</li><li><strong>Type-safe</strong> with autocomplete for 80+ DOM properties</li><li><strong>Performance optimized</strong> (throttling/debouncing built-in)</li></ul><h3 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useDomQuery } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unstableComponents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDomQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.history.changesPerSecond </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orderBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.history.volatility, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DESC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Unstable Components ({unstableComponents.count})&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {unstableComponents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{c.id}: {c.history.changesPerSecond} changes/sec&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Status:</strong> 🧪 Experimental (in development)</p><hr><h2 id="_3️⃣-minimact-dynamic-function-based-value-binding" tabindex="-1">3️⃣ minimact-dynamic: Function-Based Value Binding <a class="header-anchor" href="#_3️⃣-minimact-dynamic-function-based-value-binding" aria-label="Permalink to &quot;3️⃣ minimact-dynamic: Function-Based Value Binding&quot;">​</a></h2><p><strong>Capability:</strong> Separate structure from logic. JSX stays clean; logic lives in TypeScript functions.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-dynamic</span></span></code></pre></div><h3 id="what-it-adds-2" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds-2" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong><code>useDynamicState(selector, fn)</code></strong> - Separate structure from content</li><li><strong>Define DOM once, bind values with functions</strong></li><li><strong>Auto dependency tracking</strong> with Proxy</li><li><strong>Direct DOM updates</strong> (&lt; 1ms, no VDOM)</li><li><strong>Server pre-compilation</strong> support</li><li><strong>Minimal bundle</strong> (&lt; 3KB gzipped)</li></ul><h3 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { dynamic } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-dynamic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PricingCard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Structure ONCE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;card&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bind SEPARATELY (logic outside JSX)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.price&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.user.isPremium</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.product.factoryPrice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.product.price</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>Key Benefit:</strong> Structure is static, logic is dynamic. Re-bind without re-rendering.</p><hr><h2 id="_4️⃣-minimact-spatial-physical-layout-reasoning" tabindex="-1">4️⃣ minimact-spatial: Physical Layout Reasoning <a class="header-anchor" href="#_4️⃣-minimact-spatial-physical-layout-reasoning" aria-label="Permalink to &quot;4️⃣ minimact-spatial: Physical Layout Reasoning&quot;">​</a></h2><p><strong>Capability:</strong> DOM spatial intelligence — gaps, overlaps, flow, lookahead/lookbehind.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-spatial</span></span></code></pre></div><h3 id="what-it-adds-3" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds-3" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong><code>useArea()</code></strong> - Query spatial regions of the viewport</li><li><strong>Track coverage, density, element counts</strong></li><li><strong>Reactive spatial queries</strong></li><li><strong>Region-based event handling</strong></li><li><strong>Spatial collision detection</strong></li></ul><h3 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useArea } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-spatial&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AdaptiveLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sidebar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#sidebar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {header.isFull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompactMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {sidebar.elementsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ScrollIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Use Cases:</strong></p><ul><li>Sticky headers that adapt to content</li><li>Scroll indicators based on viewport coverage</li><li>Layout collision detection</li><li>Responsive design based on actual layout (not just viewport size)</li></ul><hr><h2 id="_5️⃣-minimact-trees-declarative-state-machines" tabindex="-1">5️⃣ minimact-trees: Declarative State Machines <a class="header-anchor" href="#_5️⃣-minimact-trees-declarative-state-machines" aria-label="Permalink to &quot;5️⃣ minimact-trees: Declarative State Machines&quot;">​</a></h2><p><strong>Capability:</strong> Understand ancestry, depth, siblings, and tree relationships declaratively.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-trees</span></span></code></pre></div><h3 id="what-it-adds-4" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds-4" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong><code>useDecisionTree()</code></strong> - XState but minimal and declarative</li><li><strong>Universal value type support</strong> (any primitive or object)</li><li><strong>Nested decision paths</strong></li><li><strong>Predictive transition pre-computation</strong></li><li><strong>Server-side rendering integration</strong></li><li><strong>TypeScript inference</strong> for tree structure</li></ul><h3 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useDecisionTree } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-trees&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PricingEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cartSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDecisionTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    roleAdmin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rolePremium: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count5: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count3: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    roleBasic: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, { role: user.role, count: cartSize });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Price: \${price}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Key Insight:</strong> Decision trees are predictable state machines. Server can pre-compute all transitions.</p><hr><h2 id="_6️⃣-minimact-quantum-the-entangled-dom" tabindex="-1">6️⃣ minimact-quantum: The Entangled DOM <a class="header-anchor" href="#_6️⃣-minimact-quantum-the-entangled-dom" aria-label="Permalink to &quot;6️⃣ minimact-quantum: The Entangled DOM&quot;">​</a></h2><p><strong>Capability:</strong> DOM sync across clients &amp; pages. Mutation vectors. Shared identity.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minimact-quantum</span></span></code></pre></div><h3 id="what-it-adds-5" tabindex="-1">What It Adds <a class="header-anchor" href="#what-it-adds-5" aria-label="Permalink to &quot;What It Adds&quot;">​</a></h3><ul><li><strong>Multi-client DOM synchronization</strong> across physical space</li><li><strong>Identity sync</strong> (not data sync - same element in two places at once)</li><li><strong>Mutation vectors</strong> for efficient transmission</li><li><strong>Bidirectional entanglement</strong></li><li><strong>Operational Transform</strong> for conflict resolution</li><li><strong>100x bandwidth reduction</strong> vs full state sync</li><li><strong>WebWormhole integration</strong> for P2P</li></ul><h3 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { quantum } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact-quantum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CollaborativeSlider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> slider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#volume-slider&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // User A in New York, User B in Tokyo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quantum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slider, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user-b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    selector: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#volume-slider&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bidirectional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // User A drags → User B&#39;s slider moves instantly</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SAME IDENTITY. DIFFERENT SPACETIME COORDINATES.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Key Concept:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Traditional: Sync data, reconstruct UI</span></span>
<span class="line"><span>Quantum: Sync DOM identity, mutations propagate</span></span></code></pre></div><p><strong>Status:</strong> 🧪 Experimental (proof-of-concept)</p><hr><h2 id="layer-composition" tabindex="-1">Layer Composition <a class="header-anchor" href="#layer-composition" aria-label="Permalink to &quot;Layer Composition&quot;">​</a></h2><p>Each layer builds on the previous:</p><table tabindex="0"><thead><tr><th>Layer</th><th>Adds</th><th>Builds On</th></tr></thead><tbody><tr><td><strong>0: Core</strong></td><td>Predictive rendering</td><td>Server HTML</td></tr><tr><td><strong>1: Punch</strong></td><td>DOM observability</td><td>Core state</td></tr><tr><td><strong>2: Query</strong></td><td>Relational queries</td><td>Punch properties</td></tr><tr><td><strong>3: Dynamic</strong></td><td>Function binding</td><td>Core patches</td></tr><tr><td><strong>4: Spatial</strong></td><td>Layout intelligence</td><td>Punch spatial data</td></tr><tr><td><strong>5: Trees</strong></td><td>State machines</td><td>Core prediction</td></tr><tr><td><strong>6: Quantum</strong></td><td>Multi-client sync</td><td>Core patches + Punch state</td></tr></tbody></table><p><strong>You can use any layer without the ones above it.</strong></p><p>Example:</p><ul><li>Use just <code>minimact-dynamic</code> with core (no Punch/Query needed)</li><li>Use <code>minimact-spatial</code> without Query</li><li>Use <code>minimact-quantum</code> directly with core</li></ul><hr><h2 id="philosophy-from-react-to-reactive" tabindex="-1">Philosophy: From React to Reactive <a class="header-anchor" href="#philosophy-from-react-to-reactive" aria-label="Permalink to &quot;Philosophy: From React to Reactive&quot;">​</a></h2><h3 id="traditional-react" tabindex="-1">Traditional React <a class="header-anchor" href="#traditional-react" aria-label="Permalink to &quot;Traditional React&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>React Component → VDOM → Reconciliation → DOM</span></span></code></pre></div><h3 id="minimact-core" tabindex="-1">Minimact Core <a class="header-anchor" href="#minimact-core" aria-label="Permalink to &quot;Minimact Core&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TSX Component → Server Render → Predictive Patches → DOM</span></span></code></pre></div><h3 id="minimact-extensions" tabindex="-1">Minimact + Extensions <a class="header-anchor" href="#minimact-extensions" aria-label="Permalink to &quot;Minimact + Extensions&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TSX Component → Server Render → Predictive Patches → DOM</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              Observable State</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              SQL Queries</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              Function Bindings</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              Spatial Reasoning</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              State Machines</span></span>
<span class="line"><span>                                                      ↓</span></span>
<span class="line"><span>                                              Quantum Sync</span></span></code></pre></div><p><strong>The DOM becomes:</strong></p><ol><li><strong>Reactive</strong> (Punch) - Observable like state</li><li><strong>Queryable</strong> (Query) - Relational like a database</li><li><strong>Declarative</strong> (Dynamic) - Bindable like templates</li><li><strong>Spatial</strong> (Spatial) - Geometric like a canvas</li><li><strong>Structural</strong> (Trees) - Hierarchical like a filesystem</li><li><strong>Distributed</strong> (Quantum) - Synchronized like CRDT</li></ol><hr><h2 id="production-readiness" tabindex="-1">Production Readiness <a class="header-anchor" href="#production-readiness" aria-label="Permalink to &quot;Production Readiness&quot;">​</a></h2><h3 id="✅-production-ready" tabindex="-1">✅ Production-Ready <a class="header-anchor" href="#✅-production-ready" aria-label="Permalink to &quot;✅ Production-Ready&quot;">​</a></h3><ul><li><strong>minimact</strong> (core)</li><li><strong>minimact-punch</strong> (MES Silver certified)</li><li><strong>minimact-dynamic</strong></li><li><strong>minimact-spatial</strong></li><li><strong>minimact-trees</strong></li></ul><h3 id="🧪-experimental" tabindex="-1">🧪 Experimental <a class="header-anchor" href="#🧪-experimental" aria-label="Permalink to &quot;🧪 Experimental&quot;">​</a></h3><ul><li><strong>minimact-query</strong> (in development)</li><li><strong>minimact-quantum</strong> (proof-of-concept)</li></ul><hr><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/v1.0/architecture/what-makes-minimact-different.html">What Makes Minimact Different</a> - Core paradigm</li><li><a href="/v1.0/architecture/predictive-rendering-101.html">Predictive Rendering 101</a> - How prediction works</li><li><a href="/v1.0/use-cases.html">Use Cases</a> - Real-world applications</li><li><a href="/v1.0/api/hooks.html">Hooks API</a> - Complete hook reference</li></ul><hr><p><strong>React gave us components.</strong></p><p><strong>Minimact gives us a reactive, queryable, distributed DOM.</strong></p><p>🌵 <strong>The future is layered.</strong> 🌵</p>`,103)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
