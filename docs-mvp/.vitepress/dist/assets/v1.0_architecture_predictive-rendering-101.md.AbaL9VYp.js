import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.B-XtCDNB.js";const E=JSON.parse('{"title":"Predictive Rendering 101","description":"","frontmatter":{},"headers":[],"relativePath":"v1.0/architecture/predictive-rendering-101.md","filePath":"v1.0/architecture/predictive-rendering-101.md"}'),e={name:"v1.0/architecture/predictive-rendering-101.md"};function p(l,s,h,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="predictive-rendering-101" tabindex="-1">Predictive Rendering 101 <a class="header-anchor" href="#predictive-rendering-101" aria-label="Permalink to &quot;Predictive Rendering 101&quot;">​</a></h1><p>Predictive rendering is the core innovation that makes Minimact feel instant. This guide explains how it works and why it&#39;s a game-changer.</p><h2 id="the-problem-network-latency" tabindex="-1">The Problem: Network Latency <a class="header-anchor" href="#the-problem-network-latency" aria-label="Permalink to &quot;The Problem: Network Latency&quot;">​</a></h2><p>Every user interaction in traditional server-rendered apps follows this flow:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>User clicks button</span></span>
<span class="line"><span>  ↓ (Network: 20ms)</span></span>
<span class="line"><span>Server processes request</span></span>
<span class="line"><span>  ↓ (Computation: 5ms)</span></span>
<span class="line"><span>Server sends response</span></span>
<span class="line"><span>  ↓ (Network: 20ms)</span></span>
<span class="line"><span>Client updates DOM</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Total: ~47ms</span></span></code></pre></div><p><strong>47ms might seem fast, but:</strong></p><ul><li>Users perceive &lt;100ms as &quot;instant&quot;</li><li>Native apps respond in &lt;16ms (60fps)</li><li>Every interaction compounds the lag</li><li>On slow networks, it&#39;s much worse</li></ul><h2 id="the-minimact-solution-pre-computation" tabindex="-1">The Minimact Solution: Pre-Computation <a class="header-anchor" href="#the-minimact-solution-pre-computation" aria-label="Permalink to &quot;The Minimact Solution: Pre-Computation&quot;">​</a></h2><p>What if the client already had the answer <strong>before the user clicked</strong>?</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Server predicts likely next states</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Server pre-computes DOM patches</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Server sends patches to client cache</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>[Client now has patches ready]</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>User clicks button</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Client finds patch in cache</span></span>
<span class="line"><span>  ↓ (0ms network - already cached!)</span></span>
<span class="line"><span>Client applies patch instantly</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Total: ~2-3ms ⚡</span></span></code></pre></div><p><strong>That&#39;s 15-20x faster!</strong></p><h2 id="how-it-works-the-template-system" tabindex="-1">How It Works: The Template System <a class="header-anchor" href="#how-it-works-the-template-system" aria-label="Permalink to &quot;How It Works: The Template System&quot;">​</a></h2><h3 id="phase-1-3-basic-templates" tabindex="-1">Phase 1-3: Basic Templates <a class="header-anchor" href="#phase-1-3-basic-templates" aria-label="Permalink to &quot;Phase 1-3: Basic Templates&quot;">​</a></h3><p><strong>Counter Example:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Count: {count}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>First Click (count: 0 → 1):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. User clicks</span></span>
<span class="line"><span>2. Server renders: &quot;Count: 1&quot;</span></span>
<span class="line"><span>3. Rust engine analyzes change:</span></span>
<span class="line"><span>   - Old HTML: &quot;Count: 0&quot;</span></span>
<span class="line"><span>   - New HTML: &quot;Count: 1&quot;</span></span>
<span class="line"><span>   - Pattern: &quot;Count: {0}&quot; ← Template extracted!</span></span>
<span class="line"><span>4. Template cached for future use</span></span></code></pre></div><p><strong>Second Click (count: 1 → 2):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. Server uses template &quot;Count: {0}&quot;</span></span>
<span class="line"><span>2. Applies with value=2 → &quot;Count: 2&quot;</span></span>
<span class="line"><span>3. Sends patch to client</span></span>
<span class="line"><span>4. Predicts next value (3)</span></span>
<span class="line"><span>5. Pre-computes patch for &quot;Count: 3&quot;</span></span>
<span class="line"><span>6. Sends prediction to client cache</span></span></code></pre></div><p><strong>Third Click (count: 2 → 3):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. User clicks</span></span>
<span class="line"><span>2. Client checks cache: ✅ Patch found!</span></span>
<span class="line"><span>3. Applies cached patch instantly</span></span>
<span class="line"><span>4. Server verifies in background</span></span>
<span class="line"><span>5. (95% chance: prediction was correct, no correction needed)</span></span></code></pre></div><p><strong>Result:</strong> After 2 clicks, all future clicks are instant.</p><h3 id="phase-4-loop-templates" tabindex="-1">Phase 4: Loop Templates <a class="header-anchor" href="#phase-4-loop-templates" aria-label="Permalink to &quot;Phase 4: Loop Templates&quot;">​</a></h3><p><strong>List Example:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TodoList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTodos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {todos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">todo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{todo.id}&gt;{todo.text}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Before Loop Templates:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3 todos = 3 patterns × 150 bytes = 450 bytes</span></span>
<span class="line"><span>10 todos = 10 patterns × 150 bytes = 1.5KB</span></span>
<span class="line"><span>100 todos = 100 patterns × 150 bytes = 15KB</span></span></code></pre></div><p><strong>After Loop Templates (Phase 4):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ANY number of todos = 1 template × 200 bytes = 200 bytes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Template: &quot;&lt;li&gt;{todo.text}&lt;/li&gt;&quot;</span></span>
<span class="line"><span>Apply for any array of any size!</span></span></code></pre></div><p><strong>Savings:</strong> 97.7% memory reduction for FAQ page (8.7KB → 200 bytes)</p><h3 id="phase-5-structural-templates" tabindex="-1">Phase 5: Structural Templates <a class="header-anchor" href="#phase-5-structural-templates" aria-label="Permalink to &quot;Phase 5: Structural Templates&quot;">​</a></h3><p><strong>Conditional Rendering:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setIsLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isLoading) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spinner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{data} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Challenge:</strong> Different structures for different states.</p><p><strong>Solution:</strong> Store templates for each branch:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">templates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loading: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;Spinner ... /&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  error: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;Error ... /&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  success: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;Table ... {data} /&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Result:</strong> 100% coverage for loading states, auth checks, feature flags.</p><h3 id="phase-6-expression-templates" tabindex="-1">Phase 6: Expression Templates <a class="header-anchor" href="#phase-6-expression-templates" aria-label="Permalink to &quot;Phase 6: Expression Templates&quot;">​</a></h3><p><strong>Formatted Values:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PriceDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${price.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Template:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${0}.{1}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Coverage:</strong> 70% for common transformations (.toFixed, arithmetic, string ops)</p><h3 id="phase-7-deep-state-traversal" tabindex="-1">Phase 7: Deep State Traversal <a class="header-anchor" href="#phase-7-deep-state-traversal" aria-label="Permalink to &quot;Phase 7: Deep State Traversal&quot;">​</a></h3><p><strong>Nested Objects:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserCard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{user.address.city}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Template:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.address.city&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Dotted path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Result:</strong> 100% coverage for nested objects.</p><h3 id="phase-8-reorder-templates" tabindex="-1">Phase 8: Reorder Templates <a class="header-anchor" href="#phase-8-reorder-templates" aria-label="Permalink to &quot;Phase 8: Reorder Templates&quot;">​</a></h3><p><strong>Sorting/Filtering:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sorted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localeCompare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b.name));</span></span></code></pre></div><p><strong>Challenge:</strong> 10 items = 10! = 3.6 million possible orderings!</p><p><strong>Solution:</strong> Detect reordering, don&#39;t create new patterns:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;reorder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [sameTemplateForEachItem],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Just the order changed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Result:</strong> 60% coverage for common ordering patterns.</p><h3 id="phase-9-semantic-array-operations" tabindex="-1">Phase 9: Semantic Array Operations <a class="header-anchor" href="#phase-9-semantic-array-operations" aria-label="Permalink to &quot;Phase 9: Semantic Array Operations&quot;">​</a></h3><p><strong>The Problem with Generic Setters:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTodos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">todos, newTodo]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server must diff arrays</span></span></code></pre></div><p><strong>The Solution - Semantic Operations:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTodos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newTodo);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Server knows intent!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTodos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No diffing needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTodos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newTodo); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Explicit operation</span></span></code></pre></div><p><strong>Performance:</strong></p><ul><li><strong>Without semantic ops:</strong> 100-200ms (array diffing)</li><li><strong>With semantic ops:</strong> 10-20ms (direct operation)</li><li><strong>Improvement:</strong> 10x faster template learning</li></ul><p><strong>All semantic operations:</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add to end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add to start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, item)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Insert at position</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Remove by index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, changes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Update by index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add multiple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Remove matching</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate, changes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Update matching</span></span></code></pre></div><h2 id="compile-time-template-generation" tabindex="-1">Compile-Time Template Generation <a class="header-anchor" href="#compile-time-template-generation" aria-label="Permalink to &quot;Compile-Time Template Generation&quot;">​</a></h2><p>Babel analyzes your JSX <strong>at build time</strong> and pre-generates templates:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Your code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;card&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{item.title}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{item.description}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))}</span></span></code></pre></div><p><strong>Babel generates:</strong></p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoopTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;div class=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">card</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;h3&gt;{0}&lt;/h3&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;p&gt;{1}&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RenderItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p><strong>Benefits:</strong></p><ul><li>✅ Zero cold start - templates ready from first render</li><li>✅ Perfect accuracy - Babel sees full JSX context</li><li>✅ Runtime fallback - Dynamic patterns still work</li></ul><h2 id="prediction-workflow" tabindex="-1">Prediction Workflow <a class="header-anchor" href="#prediction-workflow" aria-label="Permalink to &quot;Prediction Workflow&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────────┐</span></span>
<span class="line"><span>│  Server (C# + Rust)                         │</span></span>
<span class="line"><span>├─────────────────────────────────────────────┤</span></span>
<span class="line"><span>│                                             │</span></span>
<span class="line"><span>│  1. User interaction received               │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  2. C# component updates state              │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  3. C# renders new VNode tree               │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  4. Rust engine compares old vs new         │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  5. Template system:                        │</span></span>
<span class="line"><span>│     - Check for existing template           │</span></span>
<span class="line"><span>│     - OR extract new template               │</span></span>
<span class="line"><span>│     - OR use Babel pre-generated template   │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  6. Generate DOM patch                      │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  7. Send patch to client                    │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  8. Predict likely next states              │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  9. Pre-compute patches for predictions     │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  10. Send predictions to client cache       │</span></span>
<span class="line"><span>│                                             │</span></span>
<span class="line"><span>└─────────────────────────────────────────────┘</span></span>
<span class="line"><span></span></span>
<span class="line"><span>┌─────────────────────────────────────────────┐</span></span>
<span class="line"><span>│  Client (JavaScript, ~5KB)                  │</span></span>
<span class="line"><span>├─────────────────────────────────────────────┤</span></span>
<span class="line"><span>│                                             │</span></span>
<span class="line"><span>│  1. Receives patch from server              │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  2. Applies patch to DOM                    │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  3. Receives predicted patches              │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  4. Stores in HintQueue cache               │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  [User clicks button]                       │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  5. Checks HintQueue for matching patch     │</span></span>
<span class="line"><span>│     ↓                                       │</span></span>
<span class="line"><span>│  6a. Cache HIT → Apply instantly (2-3ms)    │</span></span>
<span class="line"><span>│  6b. Cache MISS → Send to server (47ms)     │</span></span>
<span class="line"><span>│                                             │</span></span>
<span class="line"><span>└─────────────────────────────────────────────┘</span></span></code></pre></div><h2 id="explicit-hints-optional" tabindex="-1">Explicit Hints (Optional) <a class="header-anchor" href="#explicit-hints-optional" aria-label="Permalink to &quot;Explicit Hints (Optional)&quot;">​</a></h2><p>For edge cases, you can give the predictor explicit hints:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { usePredictHint } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;minimact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hint: next click will increment count</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  usePredictHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ count: count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Count: {count}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>When to use hints:</strong></p><ul><li>Complex state transitions</li><li>External API calls</li><li>Multi-step workflows</li><li>Edge cases with &lt;70% coverage</li></ul><p><strong>When NOT to use hints:</strong></p><ul><li>Simple counters (template handles it)</li><li>Lists with .map() (Phase 4 handles it)</li><li>Conditional rendering (Phase 5 handles it)</li><li>Most common patterns (95-98% coverage already!)</li></ul><h2 id="performance-results" tabindex="-1">Performance Results <a class="header-anchor" href="#performance-results" aria-label="Permalink to &quot;Performance Results&quot;">​</a></h2><h3 id="latency-with-20ms-network" tabindex="-1">Latency (with 20ms network) <a class="header-anchor" href="#latency-with-20ms-network" aria-label="Permalink to &quot;Latency (with 20ms network)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Scenario</th><th>Traditional SSR</th><th>Minimact (Cache Hit)</th><th>Improvement</th></tr></thead><tbody><tr><td>Button click</td><td>47ms</td><td>2-3ms</td><td><strong>15-20x faster</strong></td></tr><tr><td>Form input (client)</td><td>47ms</td><td>&lt;1ms</td><td><strong>47x faster</strong></td></tr><tr><td>Toggle state</td><td>47ms</td><td>2-3ms</td><td><strong>15-20x faster</strong></td></tr><tr><td>List update</td><td>47ms</td><td>2-3ms</td><td><strong>15-20x faster</strong></td></tr></tbody></table><h3 id="memory-efficiency" tabindex="-1">Memory Efficiency <a class="header-anchor" href="#memory-efficiency" aria-label="Permalink to &quot;Memory Efficiency&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Pattern</th><th>Before Templates</th><th>After Templates</th><th>Reduction</th></tr></thead><tbody><tr><td>Counter (150 states)</td><td>150KB</td><td>200 bytes</td><td><strong>750x</strong></td></tr><tr><td>FAQ (29 items × 2 states)</td><td>8.7KB</td><td>200 bytes</td><td><strong>43x</strong></td></tr><tr><td>Dashboard (1000 states)</td><td>1.5MB</td><td>2KB</td><td><strong>750x</strong></td></tr></tbody></table><h3 id="coverage-after-warmup" tabindex="-1">Coverage (After Warmup) <a class="header-anchor" href="#coverage-after-warmup" aria-label="Permalink to &quot;Coverage (After Warmup)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Pattern Type</th><th>Coverage</th><th>Phases</th></tr></thead><tbody><tr><td>Simple text substitution</td><td>100%</td><td>1-3</td></tr><tr><td>Loops (.map)</td><td>100%</td><td>4</td></tr><tr><td>Conditional rendering</td><td>100%</td><td>5</td></tr><tr><td>Formatted values</td><td>70%</td><td>6</td></tr><tr><td>Nested objects</td><td>100%</td><td>7</td></tr><tr><td>Reordering</td><td>60%</td><td>8</td></tr><tr><td><strong>Overall real-world</strong></td><td><strong>95-98%</strong></td><td>1-9</td></tr></tbody></table><h2 id="interactive-playground" tabindex="-1">Interactive Playground <a class="header-anchor" href="#interactive-playground" aria-label="Permalink to &quot;Interactive Playground&quot;">​</a></h2><p>See predictive rendering in action in the <a href="https://playground.minimact.dev" target="_blank" rel="noreferrer">Minimact Playground</a>:</p><ul><li><strong>Green overlay</strong> = Cache hit (2-3ms) ✅</li><li><strong>Red overlay</strong> = Cache miss (47ms) ❌</li></ul><p>Watch as:</p><ol><li>First few interactions show red (learning)</li><li>Subsequent interactions show green (predicted)</li><li>Metrics dashboard tracks hit rate and latency</li></ol><p><strong>Typical progression:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Interaction 1: ❌ Miss (learning)</span></span>
<span class="line"><span>Interaction 2: ❌ Miss (template extraction)</span></span>
<span class="line"><span>Interaction 3: ✅ Hit (predicted!)</span></span>
<span class="line"><span>Interaction 4: ✅ Hit</span></span>
<span class="line"><span>Interaction 5: ✅ Hit</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Hit rate: 95-98%</span></span></code></pre></div><h2 id="common-questions" tabindex="-1">Common Questions <a class="header-anchor" href="#common-questions" aria-label="Permalink to &quot;Common Questions&quot;">​</a></h2><h3 id="q-what-about-complex-state-transitions" tabindex="-1">Q: What about complex state transitions? <a class="header-anchor" href="#q-what-about-complex-state-transitions" aria-label="Permalink to &quot;Q: What about complex state transitions?&quot;">​</a></h3><p><strong>A:</strong> Templates handle structural patterns, hints handle logic:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePredictHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;login-success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: fetchedUser,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePredictHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;login-failure&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="q-what-if-prediction-is-wrong" tabindex="-1">Q: What if prediction is wrong? <a class="header-anchor" href="#q-what-if-prediction-is-wrong" aria-label="Permalink to &quot;Q: What if prediction is wrong?&quot;">​</a></h3><p><strong>A:</strong> Server sends correction:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. User clicks</span></span>
<span class="line"><span>2. Client applies cached patch (might be wrong)</span></span>
<span class="line"><span>3. Server computes actual result</span></span>
<span class="line"><span>4. If different: Server sends correction patch</span></span>
<span class="line"><span>5. Client applies correction</span></span>
<span class="line"><span>6. Prediction accuracy improves for next time</span></span></code></pre></div><p><strong>In practice:</strong> 95-98% of predictions are correct after warmup.</p><h3 id="q-does-this-work-with-external-apis" tabindex="-1">Q: Does this work with external APIs? <a class="header-anchor" href="#q-does-this-work-with-external-apis" aria-label="Permalink to &quot;Q: Does this work with external APIs?&quot;">​</a></h3><p><strong>A:</strong> Yes, with hints:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">weather</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setWeather</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hint: city change will fetch new data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePredictHint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  weather: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">predictedWeatherFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newCity)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Or use <code>useServerTask</code> for long-running operations with progress:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchWeather</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useServerTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">city</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weatherAPI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(city);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/v1.0/guide/predictive-rendering.html">Template System Architecture</a> - Deep dive</li><li><a href="/v1.0/use-cases.html">Use Cases</a> - Real-world examples</li><li><a href="/v1.0/api/hooks.html">Hooks API</a> - usePredictHint reference</li><li><a href="/v1.0/architecture/what-makes-minimact-different.html">What Makes Minimact Different</a> - Overview</li></ul>`,110)])])}const g=i(e,[["render",p]]);export{E as __pageData,g as default};
