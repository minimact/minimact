using System.Text.Json.Serialization;

namespace Minimact.AspNetCore.HotReload;

/// <summary>
/// Template for a single text node or attribute
/// Represents a parameterized template extracted at build time by Babel
/// </summary>
public class Template
{
    /// <summary>
    /// Template string with {0}, {1}, etc. placeholders
    /// Example: "Count: {0}"
    /// </summary>
    [JsonPropertyName("template")]
    public string TemplateString { get; set; } = string.Empty;

    /// <summary>
    /// State bindings that fill the template slots
    /// Example: ["count"]
    /// </summary>
    [JsonPropertyName("bindings")]
    public List<string> Bindings { get; set; } = new();

    /// <summary>
    /// Character positions where params are inserted
    /// Example: [7] means {0} starts at character 7
    /// </summary>
    [JsonPropertyName("slots")]
    public List<int> Slots { get; set; } = new();

    /// <summary>
    /// DOM path to the node
    /// Example: [0, 1, 0] = first child, second child, first child
    /// </summary>
    [JsonPropertyName("path")]
    public List<int> Path { get; set; } = new();

    /// <summary>
    /// Template type: static | dynamic | attribute
    /// </summary>
    [JsonPropertyName("type")]
    public string Type { get; set; } = "dynamic";

    /// <summary>
    /// Attribute name (only for attribute templates)
    /// </summary>
    [JsonPropertyName("attribute")]
    public string? Attribute { get; set; }
}

/// <summary>
/// Complete template map for a component
/// Generated by babel-plugin-minimact at build time
/// </summary>
public class TemplateMap
{
    /// <summary>
    /// Component name
    /// </summary>
    [JsonPropertyName("component")]
    public string Component { get; set; } = string.Empty;

    /// <summary>
    /// Template map version
    /// </summary>
    [JsonPropertyName("version")]
    public string Version { get; set; } = "1.0";

    /// <summary>
    /// Timestamp when generated
    /// </summary>
    [JsonPropertyName("generatedAt")]
    public long GeneratedAt { get; set; }

    /// <summary>
    /// Map from node path to template
    /// Key format: "div[0].h1[0].text[0]"
    /// </summary>
    [JsonPropertyName("templates")]
    public Dictionary<string, Template> Templates { get; set; } = new();
}

/// <summary>
/// Template patch sent to client for hot reload
/// </summary>
public class TemplatePatch
{
    /// <summary>
    /// Patch type: UpdateTextTemplate or UpdatePropTemplate
    /// </summary>
    [JsonPropertyName("type")]
    public string Type { get; set; } = "UpdateTextTemplate";

    /// <summary>
    /// Component ID
    /// </summary>
    [JsonPropertyName("componentId")]
    public string ComponentId { get; set; } = string.Empty;

    /// <summary>
    /// DOM path to the node
    /// </summary>
    [JsonPropertyName("path")]
    public List<int> Path { get; set; } = new();

    /// <summary>
    /// New template string
    /// </summary>
    [JsonPropertyName("template")]
    public string Template { get; set; } = string.Empty;

    /// <summary>
    /// Current parameter values
    /// </summary>
    [JsonPropertyName("params")]
    public List<object?> Params { get; set; } = new();

    /// <summary>
    /// State bindings
    /// </summary>
    [JsonPropertyName("bindings")]
    public List<string> Bindings { get; set; } = new();

    /// <summary>
    /// Placeholder positions
    /// </summary>
    [JsonPropertyName("slots")]
    public List<int> Slots { get; set; } = new();

    /// <summary>
    /// Attribute name (only for UpdatePropTemplate)
    /// </summary>
    [JsonPropertyName("attribute")]
    public string? Attribute { get; set; }
}

/// <summary>
/// Template change detected by file watcher
/// </summary>
public class TemplateChange
{
    public string NodePath { get; set; } = string.Empty;
    public Template? OldTemplate { get; set; }
    public Template? NewTemplate { get; set; }
    public ChangeType ChangeType { get; set; }
}

/// <summary>
/// Type of template change
/// </summary>
public enum ChangeType
{
    Added,
    Modified,
    Removed
}
