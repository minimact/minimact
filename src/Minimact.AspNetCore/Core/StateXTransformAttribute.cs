namespace Minimact.AspNetCore.Core;

/// <summary>
/// Provides a declarative state projection (useStateX) for predictive rendering.
/// Generated by Babel plugin from useStateX calls in TSX.
/// Enables "CSS for State Logic" - declarative state-to-DOM bindings.
/// </summary>
/// <remarks>
/// This attribute is automatically generated at compile-time by the Babel plugin.
/// It contains transform functions extracted from TSX and converted to C#.
///
/// Example (TSX):
/// const [price, setPrice] = useStateX(99, {
///   targets: {
///     '.price-display': {
///       transform: v => `$${v.toFixed(2)}`,
///       applyIf: ctx => ctx.user.canSeePrice
///     }
///   }
/// });
///
/// Generated C#:
/// [StateXTransform("stateX_0", ".price-display",
///   Transform = @"v => $\"{v.ToString(\"F2\")}\"",
///   ApplyIf = @"ctx => ctx.User.CanSeePrice")]
///
/// The transform is applied during rendering to project state onto DOM targets.
/// </remarks>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
public class StateXTransformAttribute : Attribute
{
    /// <summary>
    /// The state key that this projection applies to (e.g., "stateX_0", "stateX_1")
    /// Matches the index of useStateX call in component
    /// </summary>
    public string StateKey { get; }

    /// <summary>
    /// CSS selector for the target element (relative to component root)
    /// Examples: ".price-display", "#total", ".admin-panel"
    /// </summary>
    public string Selector { get; }

    /// <summary>
    /// C# lambda expression for transforming state value to string
    /// Generated by Babel plugin from JavaScript transform function
    /// Example: @"v => $\"{v.ToString(\"F2\")}\""
    /// </summary>
    public string? Transform { get; set; }

    /// <summary>
    /// Transform ID from shared registry (alternative to inline Transform)
    /// Example: "currency-usd", "date-short", "percentage"
    /// </summary>
    public string? TransformId { get; set; }

    /// <summary>
    /// How to apply the transformed value to the DOM
    /// Options: "textContent", "innerHTML", "attribute", "class", "style"
    /// Default: "textContent"
    /// </summary>
    public string ApplyAs { get; set; } = "textContent";

    /// <summary>
    /// Property name for attribute/class/style application
    /// - If ApplyAs = "attribute": attribute name (e.g., "title", "aria-label")
    /// - If ApplyAs = "style": CSS property name (e.g., "width", "color")
    /// - If ApplyAs = "class": class name to toggle (e.g., "active", "hidden")
    /// </summary>
    public string? Property { get; set; }

    /// <summary>
    /// C# lambda expression for conditional application
    /// Return true to apply transform, false to skip
    /// Example: @"ctx => ctx.User.IsAdmin"
    /// </summary>
    public string? ApplyIf { get; set; }

    /// <summary>
    /// Template hint ID for parameterized patch matching
    /// Enables Template Patch System integration
    /// Example: "price-display-{0}"
    /// </summary>
    public string? Template { get; set; }

    /// <summary>
    /// Sync strategy for server state updates
    /// Options: "immediate", "debounced", "manual"
    /// Default: "immediate"
    /// </summary>
    public string Sync { get; set; } = "immediate";

    /// <summary>
    /// Creates a new state projection attribute
    /// </summary>
    /// <param name="stateKey">State variable key (e.g., "stateX_0")</param>
    /// <param name="selector">CSS selector for target element</param>
    public StateXTransformAttribute(string stateKey, string selector)
    {
        StateKey = stateKey;
        Selector = selector;
    }
}
