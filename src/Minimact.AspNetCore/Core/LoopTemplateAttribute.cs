namespace Minimact.AspNetCore.Core;

/// <summary>
/// Provides a loop template for predictive rendering of list items.
/// Generated by Babel plugin from .map() expressions in JSX.
/// Enables zero-latency list updates with 100% coverage and O(1) memory.
/// </summary>
/// <remarks>
/// This attribute is automatically generated at compile-time by the Babel plugin.
/// It contains a perfect template extracted from JSX that Rust can use for predictions.
///
/// Example:
/// [LoopTemplate("todos", @"{ ""itemTemplate"": { ... } }")]
///
/// The template JSON includes:
/// - arrayBinding: Which state array to iterate
/// - itemTemplate: Structure for each list item (tag, props, children)
/// - Conditional templates for boolean properties
/// - Nested element templates
/// </remarks>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
public class LoopTemplateAttribute : Attribute
{
    /// <summary>
    /// The state key that this loop template applies to (e.g., "todos", "items")
    /// </summary>
    public string StateKey { get; }

    /// <summary>
    /// JSON-serialized loop template data
    /// Contains the complete item template structure for Rust predictor
    /// </summary>
    public string TemplateJson { get; }

    /// <summary>
    /// Creates a new loop template attribute
    /// </summary>
    /// <param name="stateKey">State variable name (e.g., "todos")</param>
    /// <param name="templateJson">JSON template data from Babel plugin</param>
    public LoopTemplateAttribute(string stateKey, string templateJson)
    {
        StateKey = stateKey;
        TemplateJson = templateJson;
    }
}
