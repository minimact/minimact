namespace Minimact.AspNetCore.Core;

/// <summary>
/// Provides expression templates for predictive rendering of computed values (Phase 6).
/// Generated by Babel plugin from expressions like toFixed(), arithmetic, etc. in JSX.
/// Enables zero-latency updates for formatted numbers and computed values.
/// </summary>
/// <remarks>
/// This attribute is automatically generated at compile-time by the Babel plugin.
/// It contains expression metadata extracted from JSX that Rust can use for predictions.
///
/// Example:
/// [ExpressionTemplate(@"[{ ""stateKey"": ""price"", ""method"": ""toFixed"", ""args"": [2] }]")]
///
/// The template JSON array includes:
/// - type: Method call, binary expression, member access, etc.
/// - stateKey: Which state variable to bind to
/// - transform: How to transform the value (toFixed, arithmetic, etc.)
/// - args: Arguments for the transformation
/// </remarks>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public class ExpressionTemplateAttribute : Attribute
{
    /// <summary>
    /// JSON-serialized array of expression template metadata
    /// Contains the complete expression templates for Rust predictor
    /// </summary>
    public string TemplatesJson { get; }

    /// <summary>
    /// Creates a new expression template attribute
    /// </summary>
    /// <param name="templatesJson">JSON array of expression templates from Babel plugin</param>
    public ExpressionTemplateAttribute(string templatesJson)
    {
        TemplatesJson = templatesJson;
    }
}
