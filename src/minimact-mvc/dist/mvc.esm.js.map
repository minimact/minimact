{"version":3,"file":"mvc.esm.js","sources":["../src/hooks.ts","../src/index.ts"],"sourcesContent":["/**\r\n * @minimact/mvc - Hooks\r\n *\r\n * React-like hooks for accessing MVC ViewModels in Minimact components\r\n */\r\n\r\nimport type {\r\n    MvcViewModelWrapper,\r\n    MutableMvcState,\r\n    ImmutableMvcState,\r\n    UseMvcStateOptions\r\n} from './types';\r\n\r\n// Import from @minimact/core\r\nlet currentContext: any = null;\r\nlet stateIndex = 0;\r\n\r\n/**\r\n * Access MVC ViewModel property as reactive state\r\n *\r\n * Automatically enforces mutability based on C# [Mutable] attribute:\r\n * - If property is marked [Mutable]: Returns [value, setter]\r\n * - If property is immutable: Returns [value] (no setter)\r\n *\r\n * The setter syncs changes back to the server via SignalR.\r\n * Server validates mutability before applying updates.\r\n *\r\n * @example\r\n * // Mutable property (has [Mutable] in C#)\r\n * const [count, setCount] = useMvcState<number>('initialCount');\r\n * setCount(10); // âœ… Syncs to server\r\n *\r\n * @example\r\n * // Immutable property (no [Mutable] in C#)\r\n * const [isAdmin] = useMvcState<boolean>('isAdminRole');\r\n * // No setter available - TypeScript enforces read-only\r\n *\r\n * @param propertyName - Name of the ViewModel property (camelCase)\r\n * @param options - Configuration options\r\n * @returns Tuple of [value] or [value, setter] depending on mutability\r\n */\r\nexport function useMvcState<T>(\r\n    propertyName: string,\r\n    options?: UseMvcStateOptions\r\n): MutableMvcState<T> | ImmutableMvcState<T> {\r\n    // Get current component context (set by Minimact runtime)\r\n    const ctx = (window as any).__MINIMACT_CONTEXT__ || currentContext;\r\n\r\n    if (!ctx) {\r\n        throw new Error('[MVC Bridge] useMvcState must be called within a component render');\r\n    }\r\n\r\n    const context = ctx;\r\n    const index = stateIndex++;\r\n    const stateKey = `mvc_${propertyName}_${index}`;\r\n\r\n    // Get ViewModel wrapper from window (embedded by server)\r\n    const wrapper = window.__MINIMACT_VIEWMODEL__;\r\n\r\n    if (!wrapper) {\r\n        console.warn(\r\n            `[MVC Bridge] No ViewModel found. ` +\r\n            `Did you render this component via MinimactPageRenderer?`\r\n        );\r\n    }\r\n\r\n    // Check mutability (from C# [Mutable] attribute)\r\n    const isMutable = options?.forceMutable ||\r\n                     wrapper?._mutability?.[propertyName] ||\r\n                     false;\r\n\r\n    // Initialize state from ViewModel data\r\n    if (!context.state.has(stateKey)) {\r\n        const initialValue = wrapper?.data?.[propertyName] ?? options?.defaultValue;\r\n        context.state.set(stateKey, initialValue);\r\n    }\r\n\r\n    const currentValue = context.state.get(stateKey) as T;\r\n\r\n    // If immutable, return [value] only (no setter)\r\n    if (!isMutable) {\r\n        return [currentValue] as ImmutableMvcState<T>;\r\n    }\r\n\r\n    // If mutable, return [value, setter]\r\n    const setState = (newValue: T | ((prev: T) => T)) => {\r\n        const startTime = performance.now();\r\n\r\n        // Resolve new value\r\n        const actualNewValue = typeof newValue === 'function'\r\n            ? (newValue as (prev: T) => T)(context.state.get(stateKey) as T)\r\n            : newValue;\r\n\r\n        // Check equality (skip if unchanged)\r\n        const equals = options?.equals || Object.is;\r\n        if (equals(currentValue, actualNewValue)) {\r\n            return; // No change\r\n        }\r\n\r\n        // Update local state\r\n        context.state.set(stateKey, actualNewValue);\r\n\r\n        // Build state change object for hint matching\r\n        const stateChanges: Record<string, any> = {\r\n            [stateKey]: actualNewValue\r\n        };\r\n\r\n        // Check hint queue for template match (predictive rendering)\r\n        const hint = context.hintQueue?.matchHint?.(context.componentId, stateChanges);\r\n\r\n        if (hint) {\r\n            // ðŸŸ¢ CACHE HIT! Apply queued patches immediately\r\n            const latency = performance.now() - startTime;\r\n            console.log(\r\n                `[MVC Bridge] ðŸŸ¢ CACHE HIT! MVC state '${propertyName}' updated ` +\r\n                `(${hint.patches.length} patches in ${latency.toFixed(2)}ms)`\r\n            );\r\n\r\n            context.domPatcher?.applyPatches?.(context.element, hint.patches);\r\n\r\n            // Notify playground bridge\r\n            if (context.playgroundBridge) {\r\n                context.playgroundBridge.cacheHit({\r\n                    componentId: context.componentId,\r\n                    hintId: hint.hintId,\r\n                    latency,\r\n                    confidence: hint.confidence,\r\n                    patchCount: hint.patches.length\r\n                });\r\n            }\r\n        } else {\r\n            // ðŸ”´ CACHE MISS\r\n            console.log(`[MVC Bridge] ðŸ”´ CACHE MISS - MVC state '${propertyName}' changed`);\r\n\r\n            if (context.playgroundBridge) {\r\n                context.playgroundBridge.cacheMiss({\r\n                    componentId: context.componentId,\r\n                    methodName: `setMvcState(${propertyName})`,\r\n                    latency: performance.now() - startTime,\r\n                    patchCount: 0\r\n                });\r\n            }\r\n        }\r\n\r\n        // Sync to server (validates mutability server-side)\r\n        const syncStrategy = options?.sync || 'immediate';\r\n\r\n        if (syncStrategy === 'immediate') {\r\n            syncToServer(context, stateKey, actualNewValue, propertyName);\r\n        } else if (syncStrategy === 'debounced') {\r\n            debouncedSyncToServer(\r\n                context,\r\n                stateKey,\r\n                actualNewValue,\r\n                propertyName,\r\n                options?.syncDelay || 300\r\n            );\r\n        }\r\n        // If 'manual', don't auto-sync\r\n    };\r\n\r\n    return [currentValue, setState] as MutableMvcState<T>;\r\n}\r\n\r\n/**\r\n * Access the entire MVC ViewModel (read-only)\r\n *\r\n * Returns the full ViewModel object passed from the controller.\r\n * Useful for accessing multiple properties without calling useMvcState multiple times.\r\n *\r\n * @example\r\n * interface MyViewModel {\r\n *   fullName: string;\r\n *   isAdmin: boolean;\r\n *   posts: Array<{ title: string }>;\r\n * }\r\n *\r\n * const viewModel = useMvcViewModel<MyViewModel>();\r\n * console.log(viewModel.fullName);\r\n * console.log(viewModel.posts.length);\r\n *\r\n * @returns ViewModel data or null if not found\r\n */\r\nexport function useMvcViewModel<T = any>(): T | null {\r\n    const wrapper = window.__MINIMACT_VIEWMODEL__;\r\n    return wrapper?.data ?? null;\r\n}\r\n\r\n/**\r\n * Check if a ViewModel property is mutable\r\n *\r\n * Useful for dynamic UI (show/hide controls based on mutability)\r\n *\r\n * @example\r\n * const canEdit = isMvcPropertyMutable('fullName');\r\n * {canEdit && <button>Edit</button>}\r\n *\r\n * @param propertyName - Name of the ViewModel property (camelCase)\r\n * @returns True if property has [Mutable] attribute in C#\r\n */\r\nexport function isMvcPropertyMutable(propertyName: string): boolean {\r\n    const wrapper = window.__MINIMACT_VIEWMODEL__;\r\n    return wrapper?._mutability?.[propertyName] ?? false;\r\n}\r\n\r\n/**\r\n * Get metadata about all MVC state bindings\r\n *\r\n * Useful for debugging and DevTools integration\r\n *\r\n * @returns Array of state metadata\r\n */\r\nexport function getMvcStateMetadata(): Array<{\r\n    propertyName: string;\r\n    isMutable: boolean;\r\n}> {\r\n    const wrapper = window.__MINIMACT_VIEWMODEL__;\r\n\r\n    if (!wrapper) {\r\n        return [];\r\n    }\r\n\r\n    return Object.keys(wrapper.data).map(propertyName => ({\r\n        propertyName,\r\n        isMutable: wrapper._mutability[propertyName] ?? false\r\n    }));\r\n}\r\n\r\n// ============================================================\r\n// Internal Helper Functions\r\n// ============================================================\r\n\r\n/**\r\n * Sync state to server immediately\r\n */\r\nfunction syncToServer(\r\n    context: any,\r\n    stateKey: string,\r\n    value: any,\r\n    propertyName: string\r\n): void {\r\n    if (!context.signalR) {\r\n        console.warn('[MVC Bridge] No SignalR connection found. State will not sync to server.');\r\n        return;\r\n    }\r\n\r\n    context.signalR.updateComponentState(context.componentId, stateKey, value)\r\n        .catch((err: Error) => {\r\n            console.error(\r\n                `[MVC Bridge] Failed to sync MVC state '${propertyName}' to server:`,\r\n                err\r\n            );\r\n\r\n            // Check if error is due to immutability violation\r\n            if (err.message && err.message.includes('immutable')) {\r\n                console.error(\r\n                    `[MVC Bridge] ðŸš¨ SECURITY: Attempted to modify immutable state '${propertyName}'. ` +\r\n                    `Add [Mutable] attribute in C# ViewModel or make this read-only.`\r\n                );\r\n            }\r\n\r\n            // TODO: Revert state on error?\r\n            // context.state.set(stateKey, previousValue);\r\n        });\r\n}\r\n\r\n/**\r\n * Debounced sync to server (for text inputs, etc.)\r\n */\r\nconst debounceTimers = new Map<string, number>();\r\n\r\nfunction debouncedSyncToServer(\r\n    context: any,\r\n    stateKey: string,\r\n    value: any,\r\n    propertyName: string,\r\n    delay: number\r\n): void {\r\n    // Clear existing timer\r\n    const existingTimer = debounceTimers.get(stateKey);\r\n    if (existingTimer) {\r\n        clearTimeout(existingTimer);\r\n    }\r\n\r\n    // Set new timer\r\n    const timerId = window.setTimeout(() => {\r\n        syncToServer(context, stateKey, value, propertyName);\r\n        debounceTimers.delete(stateKey);\r\n    }, delay);\r\n\r\n    debounceTimers.set(stateKey, timerId);\r\n}\r\n\r\n/**\r\n * Manually sync all pending debounced state to server\r\n * Useful for form submission\r\n *\r\n * @example\r\n * const handleSubmit = () => {\r\n *   flushMvcState(); // Ensure all changes synced\r\n *   // ... submit form\r\n * };\r\n */\r\nexport function flushMvcState(): void {\r\n    // Trigger all pending debounced syncs immediately\r\n    debounceTimers.forEach((timerId) => {\r\n        clearTimeout(timerId);\r\n    });\r\n    debounceTimers.clear();\r\n}\r\n\r\n// ============================================================\r\n// Integration with @minimact/core\r\n// ============================================================\r\n\r\n/**\r\n * Set current component context (called by Minimact runtime)\r\n * @internal\r\n */\r\nexport function setMvcContext(context: any): void {\r\n    currentContext = context;\r\n}\r\n\r\n/**\r\n * Clear component context (called by Minimact runtime)\r\n * @internal\r\n */\r\nexport function clearMvcContext(): void {\r\n    currentContext = null;\r\n    stateIndex = 0;\r\n}\r\n\r\n/**\r\n * Reset state index (called before each render)\r\n * @internal\r\n */\r\nexport function resetMvcStateIndex(): void {\r\n    stateIndex = 0;\r\n}\r\n","/**\r\n * @minimact/mvc\r\n *\r\n * MVC Bridge integration for Minimact\r\n * Seamless connection between ASP.NET MVC Controllers and Minimact components\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\n// ============================================================\r\n// HOOKS\r\n// ============================================================\r\n\r\n/**\r\n * Core hooks for accessing MVC ViewModel data\r\n */\r\nexport {\r\n    useMvcState,\r\n    useMvcViewModel,\r\n    isMvcPropertyMutable,\r\n    getMvcStateMetadata,\r\n    flushMvcState\r\n} from './hooks';\r\n\r\n/**\r\n * Internal functions for Minimact runtime integration\r\n * @internal\r\n */\r\nexport {\r\n    setMvcContext,\r\n    clearMvcContext,\r\n    resetMvcStateIndex\r\n} from './hooks';\r\n\r\n// ============================================================\r\n// TYPES\r\n// ============================================================\r\n\r\n/**\r\n * Type definitions\r\n */\r\nexport type {\r\n    MvcViewModelWrapper,\r\n    MutableMvcState,\r\n    ImmutableMvcState,\r\n    UseMvcStateOptions,\r\n    MvcStateMetadata\r\n} from './types';\r\n\r\n// ============================================================\r\n// VERSION & METADATA\r\n// ============================================================\r\n\r\nexport const VERSION = '0.1.0';\r\n\r\n/**\r\n * Package metadata for debugging\r\n */\r\nexport const PACKAGE_INFO = {\r\n    name: '@minimact/mvc',\r\n    version: VERSION,\r\n    description: 'MVC Bridge integration for Minimact',\r\n    features: [\r\n        'useMvcState hook with automatic mutability enforcement',\r\n        'useMvcViewModel hook for read-only ViewModel access',\r\n        'Server-side [Mutable] attribute support',\r\n        'Security boundary validation',\r\n        'Full TypeScript type safety',\r\n        'Sync strategies (immediate, debounced, manual)',\r\n        'Template Patch System integration',\r\n        'PlaygroundBridge support'\r\n    ]\r\n} as const;\r\n\r\n/**\r\n * Usage example:\r\n *\r\n * @example\r\n * // C# ViewModel\r\n * public class ProductViewModel {\r\n *     public string ProductName { get; set; }\r\n *     public decimal Price { get; set; }\r\n *     public bool IsAdmin { get; set; }\r\n *\r\n *     [Mutable]\r\n *     public int InitialQuantity { get; set; }\r\n * }\r\n *\r\n * @example\r\n * // TSX Component\r\n * import { useMvcState, useMvcViewModel } from '@minimact/mvc';\r\n *\r\n * interface ProductViewModel {\r\n *     productName: string;\r\n *     price: number;\r\n *     isAdmin: boolean;\r\n *     initialQuantity: number;\r\n * }\r\n *\r\n * export function ProductPage() {\r\n *     // Immutable (no setter)\r\n *     const [productName] = useMvcState<string>('productName');\r\n *     const [price] = useMvcState<number>('price');\r\n *     const [isAdmin] = useMvcState<boolean>('isAdmin');\r\n *\r\n *     // Mutable (with setter)\r\n *     const [quantity, setQuantity] = useMvcState<number>('initialQuantity');\r\n *\r\n *     // Access entire ViewModel\r\n *     const viewModel = useMvcViewModel<ProductViewModel>();\r\n *\r\n *     return (\r\n *         <div>\r\n *             <h1>{productName}</h1>\r\n *             <p>${price.toFixed(2)}</p>\r\n *\r\n *             <div>\r\n *                 <button onClick={() => setQuantity(quantity - 1)}>-</button>\r\n *                 <span>{quantity}</span>\r\n *                 <button onClick={() => setQuantity(quantity + 1)}>+</button>\r\n *             </div>\r\n *\r\n *             {isAdmin && <button>Edit Product</button>}\r\n *         </div>\r\n *     );\r\n * }\r\n */\r\n"],"names":[],"mappings":"AAAA;;;;AAIG;AASH;AACA,IAAI,cAAc,GAAQ,IAAI;AAC9B,IAAI,UAAU,GAAG,CAAC;AAElB;;;;;;;;;;;;;;;;;;;;;;;AAuBG;AACG,SAAU,WAAW,CACvB,YAAoB,EACpB,OAA4B,EAAA;;AAG5B,IAAA,MAAM,GAAG,GAAI,MAAc,CAAC,oBAAoB,IAAI,cAAc;IAElE,IAAI,CAAC,GAAG,EAAE;AACN,QAAA,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC;IACxF;IAEA,MAAM,OAAO,GAAG,GAAG;AACnB,IAAA,MAAM,KAAK,GAAG,UAAU,EAAE;AAC1B,IAAA,MAAM,QAAQ,GAAG,CAAA,IAAA,EAAO,YAAY,CAAA,CAAA,EAAI,KAAK,EAAE;;AAG/C,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,sBAAsB;IAE7C,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,CAAC,IAAI,CACR,CAAA,iCAAA,CAAmC;AACnC,YAAA,CAAA,uDAAA,CAAyD,CAC5D;IACL;;AAGA,IAAA,MAAM,SAAS,GAAG,OAAO,EAAE,YAAY;AACtB,QAAA,OAAO,EAAE,WAAW,GAAG,YAAY,CAAC;AACpC,QAAA,KAAK;;IAGtB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAC9B,QAAA,MAAM,YAAY,GAAG,OAAO,EAAE,IAAI,GAAG,YAAY,CAAC,IAAI,OAAO,EAAE,YAAY;QAC3E,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC;IAC7C;IAEA,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAM;;IAGrD,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO,CAAC,YAAY,CAAyB;IACjD;;AAGA,IAAA,MAAM,QAAQ,GAAG,CAAC,QAA8B,KAAI;AAChD,QAAA,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE;;AAGnC,QAAA,MAAM,cAAc,GAAG,OAAO,QAAQ,KAAK;cACpC,QAA2B,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAM;cAC7D,QAAQ;;QAGd,MAAM,MAAM,GAAG,OAAO,EAAE,MAAM,IAAI,MAAM,CAAC,EAAE;AAC3C,QAAA,IAAI,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC,EAAE;AACtC,YAAA,OAAO;QACX;;QAGA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,CAAC;;AAG3C,QAAA,MAAM,YAAY,GAAwB;YACtC,CAAC,QAAQ,GAAG;SACf;;AAGD,QAAA,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,EAAE,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC;QAE9E,IAAI,IAAI,EAAE;;YAEN,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;AAC7C,YAAA,OAAO,CAAC,GAAG,CACP,CAAA,sCAAA,EAAyC,YAAY,CAAA,UAAA,CAAY;AACjE,gBAAA,CAAA,CAAA,EAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAA,YAAA,EAAe,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA,GAAA,CAAK,CAChE;AAED,YAAA,OAAO,CAAC,UAAU,EAAE,YAAY,GAAG,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;;AAGjE,YAAA,IAAI,OAAO,CAAC,gBAAgB,EAAE;AAC1B,gBAAA,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC;oBAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,OAAO;oBACP,UAAU,EAAE,IAAI,CAAC,UAAU;AAC3B,oBAAA,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC;AAC5B,iBAAA,CAAC;YACN;QACJ;aAAO;;AAEH,YAAA,OAAO,CAAC,GAAG,CAAC,2CAA2C,YAAY,CAAA,SAAA,CAAW,CAAC;AAE/E,YAAA,IAAI,OAAO,CAAC,gBAAgB,EAAE;AAC1B,gBAAA,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC;oBAC/B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,UAAU,EAAE,CAAA,YAAA,EAAe,YAAY,CAAA,CAAA,CAAG;AAC1C,oBAAA,OAAO,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS;AACtC,oBAAA,UAAU,EAAE;AACf,iBAAA,CAAC;YACN;QACJ;;AAGA,QAAA,MAAM,YAAY,GAAG,OAAO,EAAE,IAAI,IAAI,WAAW;AAEjD,QAAA,IAAI,YAAY,KAAK,WAAW,EAAE;YAC9B,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,YAAY,CAAC;QACjE;AAAO,aAAA,IAAI,YAAY,KAAK,WAAW,EAAE;AACrC,YAAA,qBAAqB,CACjB,OAAO,EACP,QAAQ,EACR,cAAc,EACd,YAAY,EACZ,OAAO,EAAE,SAAS,IAAI,GAAG,CAC5B;QACL;;AAEJ,IAAA,CAAC;AAED,IAAA,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAuB;AACzD;AAEA;;;;;;;;;;;;;;;;;;AAkBG;SACa,eAAe,GAAA;AAC3B,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,sBAAsB;AAC7C,IAAA,OAAO,OAAO,EAAE,IAAI,IAAI,IAAI;AAChC;AAEA;;;;;;;;;;;AAWG;AACG,SAAU,oBAAoB,CAAC,YAAoB,EAAA;AACrD,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,sBAAsB;IAC7C,OAAO,OAAO,EAAE,WAAW,GAAG,YAAY,CAAC,IAAI,KAAK;AACxD;AAEA;;;;;;AAMG;SACa,mBAAmB,GAAA;AAI/B,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,sBAAsB;IAE7C,IAAI,CAAC,OAAO,EAAE;AACV,QAAA,OAAO,EAAE;IACb;AAEA,IAAA,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,YAAY,KAAK;QAClD,YAAY;QACZ,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI;AACnD,KAAA,CAAC,CAAC;AACP;AAEA;AACA;AACA;AAEA;;AAEG;AACH,SAAS,YAAY,CACjB,OAAY,EACZ,QAAgB,EAChB,KAAU,EACV,YAAoB,EAAA;AAEpB,IAAA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;AAClB,QAAA,OAAO,CAAC,IAAI,CAAC,0EAA0E,CAAC;QACxF;IACJ;AAEA,IAAA,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,EAAE,KAAK;AACpE,SAAA,KAAK,CAAC,CAAC,GAAU,KAAI;QAClB,OAAO,CAAC,KAAK,CACT,CAAA,uCAAA,EAA0C,YAAY,CAAA,YAAA,CAAc,EACpE,GAAG,CACN;;AAGD,QAAA,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;AAClD,YAAA,OAAO,CAAC,KAAK,CACT,CAAA,+DAAA,EAAkE,YAAY,CAAA,GAAA,CAAK;AACnF,gBAAA,CAAA,+DAAA,CAAiE,CACpE;QACL;;;AAIJ,IAAA,CAAC,CAAC;AACV;AAEA;;AAEG;AACH,MAAM,cAAc,GAAG,IAAI,GAAG,EAAkB;AAEhD,SAAS,qBAAqB,CAC1B,OAAY,EACZ,QAAgB,EAChB,KAAU,EACV,YAAoB,EACpB,KAAa,EAAA;;IAGb,MAAM,aAAa,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC;IAClD,IAAI,aAAa,EAAE;QACf,YAAY,CAAC,aAAa,CAAC;IAC/B;;AAGA,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAK;QACnC,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,CAAC;AACpD,QAAA,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC;IACnC,CAAC,EAAE,KAAK,CAAC;AAET,IAAA,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC;AACzC;AAEA;;;;;;;;;AASG;SACa,aAAa,GAAA;;AAEzB,IAAA,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;QAC/B,YAAY,CAAC,OAAO,CAAC;AACzB,IAAA,CAAC,CAAC;IACF,cAAc,CAAC,KAAK,EAAE;AAC1B;AAEA;AACA;AACA;AAEA;;;AAGG;AACG,SAAU,aAAa,CAAC,OAAY,EAAA;IACtC,cAAc,GAAG,OAAO;AAC5B;AAEA;;;AAGG;SACa,eAAe,GAAA;IAC3B,cAAc,GAAG,IAAI;IACrB,UAAU,GAAG,CAAC;AAClB;AAEA;;;AAGG;SACa,kBAAkB,GAAA;IAC9B,UAAU,GAAG,CAAC;AAClB;;AClVA;;;;;;;AAOG;AAEH;AACA;AACA;AAEA;;AAEG;AAkCH;AACA;AACA;AAEO,MAAM,OAAO,GAAG;AAEvB;;AAEG;AACI,MAAM,YAAY,GAAG;AACxB,IAAA,IAAI,EAAE,eAAe;AACrB,IAAA,OAAO,EAAE,OAAO;AAChB,IAAA,WAAW,EAAE,qCAAqC;AAClD,IAAA,QAAQ,EAAE;QACN,wDAAwD;QACxD,qDAAqD;QACrD,yCAAyC;QACzC,8BAA8B;QAC9B,6BAA6B;QAC7B,gDAAgD;QAChD,mCAAmC;QACnC;AACH;;AAGL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDG;;;;"}